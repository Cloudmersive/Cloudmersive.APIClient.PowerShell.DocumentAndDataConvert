{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "convertapi",
    "description": "Convert API lets you effortlessly convert file formats and types."
  },
  "host": "api.cloudmersive.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/convert/compare/docx": {
      "post": {
        "tags": [
          "CompareDocument"
        ],
        "summary": "Compare Two Word DOCX",
        "description": "Compare two Office Word Documents (docx) files and highlight the differences",
        "operationId": "CompareDocument_Docx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/csv/to/json": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Convert CSV to JSON conversion",
        "description": "Convert a CSV file to a JSON object array",
        "operationId": "ConvertData_CsvToJson",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "columnNamesFromFirstRow",
            "in": "header",
            "description": "Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/json": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Convert Excel XLSX to JSON conversion",
        "description": "Convert an Excel XLSX file to a JSON object array",
        "operationId": "ConvertData_XlsxToJson",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xls/to/json": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Convert Excel (97-2003) XLS to JSON conversion",
        "description": "Convert an Excel (97-2003) XLS file to a JSON object array",
        "operationId": "ConvertData_XlsToJson",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/to/json": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Convert XML to JSON conversion",
        "description": "Convert an XML string or file into JSON",
        "operationId": "ConvertData_XmlToJson",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/select/xpath": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Filter, select XML nodes using XPath expression, get results",
        "description": "Return the reuslts of filtering, selecting an XML document with an XPath expression",
        "operationId": "ConvertData_XmlFilterWithXPath",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlFilterWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/query/xquery": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Query an XML file using XQuery query, get results",
        "description": "Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book",
        "operationId": "ConvertData_XmlQueryWithXQuery",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "XQuery",
            "in": "header",
            "description": "Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlQueryWithXQueryResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/query/xquery/multi": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Query multiple XML files using XQuery query, get results",
        "description": "Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\"books.xml\") or doc(\"restaurants.xml\") if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.",
        "operationId": "ConvertData_XmlQueryWithXQueryMulti",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input XML file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "XQuery",
            "in": "header",
            "description": "Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlQueryWithXQueryMultiResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/edit/xpath/set-value": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Sets the value contents of XML nodes matching XPath expression",
        "description": "Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.",
        "operationId": "ConvertData_XmlEditSetValueWithXPath",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          },
          {
            "name": "XmlValue",
            "in": "header",
            "description": "XML Value to set into the matching XML nodes",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlSetValueWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/edit/xpath/replace": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Replaces XML nodes matching XPath expression with new node",
        "description": "Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.",
        "operationId": "ConvertData_XmlEditReplaceWithXPath",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          },
          {
            "name": "XmlNodeReplacement",
            "in": "header",
            "description": "XML Node replacement content",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlReplaceWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/edit/xpath/add-child": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Adds an XML node as a child to XML nodes matching XPath expression",
        "description": "Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.",
        "operationId": "ConvertData_XmlEditAddChildWithXPath",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          },
          {
            "name": "XmlNodeToAdd",
            "in": "header",
            "description": "XML Node to add as a child",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlAddChildWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/edit/xpath/add-attribute": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Adds an attribute to all XML nodes matching XPath expression",
        "description": "Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.",
        "operationId": "ConvertData_XmlEditAddAttributeWithXPath",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          },
          {
            "name": "XmlAttributeName",
            "in": "header",
            "description": "Name of the XML attribute to add",
            "required": true,
            "type": "string"
          },
          {
            "name": "XmlAttributeValue",
            "in": "header",
            "description": "Value of the XML attribute to add",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlAddAttributeWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/edit/xpath/remove": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Remove, delete XML nodes and items matching XPath expression",
        "description": "Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression",
        "operationId": "ConvertData_XmlRemoveWithXPath",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlRemoveWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/edit/xpath/remove-all-children": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes",
        "description": "Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.",
        "operationId": "ConvertData_XmlEditRemoveAllChildNodesWithXPath",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "XPathExpression",
            "in": "header",
            "description": "Valid XML XPath query expression",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XmlRemoveAllChildrenWithXPathResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xml/transform/xslt/to/xml": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Transform XML document file with XSLT into a new XML document",
        "description": "Convert an XML string or file into JSON",
        "operationId": "ConvertData_XmlTransformWithXsltToXml",
        "consumes": [],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input XML file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "transformFile",
            "in": "formData",
            "description": "Input XSLT file to use to transform the input XML file.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/json/to/xml": {
      "post": {
        "tags": [
          "ConvertData"
        ],
        "summary": "Convert JSON to XML conversion",
        "description": "Convert a JSON object into XML",
        "operationId": "ConvertData_JsonToXml",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "JsonObject",
            "in": "body",
            "description": "Input JSON to convert to XML",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/docx/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOCX Document to PDF",
        "description": "Convert Office Word Documents (docx) to standard PDF",
        "operationId": "ConvertDocument_DocxToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/docx/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOCX Document to Text (txt)",
        "description": "Convert Office Word Documents (docx) to text",
        "operationId": "ConvertDocument_DocxToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "textFormattingMode",
            "in": "header",
            "description": "Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'minimizeWhitespace'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/docx/to/rtf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOCX Document to RTF",
        "description": "Convert an Office Word Document (DOCX) to Rich Text Format Document (RTF)",
        "operationId": "ConvertDocument_DocxToRtf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/docx/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOCX Document to PNG image array",
        "description": "Converts an Office Word Document (DOCX) file to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_DocxToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/docx/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOCX Document to JPG/JPEG image array",
        "description": "Converts an Office Word Document (DOCX) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_DocxToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/docx/to/html": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOCX Document to HTML Document",
        "description": "Convert Office Word Document (DOCX) to HTML Document",
        "operationId": "ConvertDocument_DocxToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/doc/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOC (97-03) Document to PDF",
        "description": "Convert Office Word (97-2003 Format) Documents (doc) to standard PDF",
        "operationId": "ConvertDocument_DocToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/doc/to/docx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOC (97-03) Document to DOCX",
        "description": "Convert/upgrade Office Word (97-2003 Format) Documents (doc) to the modern DOCX format",
        "operationId": "ConvertDocument_DocToDocx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/doc/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Word DOC (97-03) Document to Text (txt)",
        "description": "Convert Office Word DOC (97-03) Document (doc) to text",
        "operationId": "ConvertDocument_DocToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pptx/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PowerPoint PPTX Presentation to PDF",
        "description": "Convert Office PowerPoint Documents (pptx) to standard PDF",
        "operationId": "ConvertDocument_PptxToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pptx/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PowerPoint PPTX Presentation to Text (txt)",
        "description": "Convert Office PowerPoint Documents (pptx) to standard Text",
        "operationId": "ConvertDocument_PptxToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pptx/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PowerPoint PPTX to PNG image array",
        "description": "Converts a PowerPoint Presentation (PPTX) file to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_PptxToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PptxToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/ppt/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PowerPoint PPT (97-03) Presentation to PDF",
        "description": "Convert Office PowerPoint (97-2003) Documents (ppt) to standard PDF",
        "operationId": "ConvertDocument_PptToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/ppt/to/pptx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PowerPoint PPT (97-03) Presentation to PPTX",
        "description": "Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to modern PPTX",
        "operationId": "ConvertDocument_PptToPptx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLSX Spreadsheet to PDF",
        "description": "Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel file formats.",
        "operationId": "ConvertDocument_XlsxToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLSX Spreadsheet to Text (txt)",
        "description": "Convert Office Excel Workbooks (XLSX) to standard Text.  Converts all worksheets in the workbook to Text.  Supports both XLSX and XLSB file formats.  When a spreadsheet contains multiple worksheets, will export all of the text from all of the worksheets.  If you wish to export the text from only one worksheet, try using the Split XLSX API to split the spreadsheet into multiple worksheet files, and then run XLSX to Text on the individual worksheet file that you need to extract the text from.",
        "operationId": "ConvertDocument_XlsxToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/html": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLSX Spreadsheet to HTML Document",
        "description": "Convert Office Excel Spreadsheet (XLSX) to HTML Document.  Converts all worksheets to HTML.  Supports both XLSX and XLSB Excel file formats.",
        "operationId": "ConvertDocument_XlsxToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xls/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLS (97-03) Spreadsheet to PDF",
        "description": "Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.  Converts all worksheets in the workbook to PDF.",
        "operationId": "ConvertDocument_XlsToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xls/to/xlsx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLS (97-03) Spreadsheet to XLSX",
        "description": "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern XLSX format.",
        "operationId": "ConvertDocument_XlsToXlsx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xls/to/csv": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLS (97-03) Spreadsheet to CSV",
        "description": "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard CSV format.",
        "operationId": "ConvertDocument_XlsToCsv",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/csv/to/xlsx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert CSV to Excel XLSX Spreadsheet",
        "description": "Convert CSV file to Office Excel XLSX Workbooks file format.",
        "operationId": "ConvertDocument_CsvToXlsx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/csv/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert CSV to PDF document",
        "description": "Convert Comma-Separated Values (CSV) file to PDF document.",
        "operationId": "ConvertDocument_CsvToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/csv/to/html": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert CSV to HTML document",
        "description": "Convert Comma-Separated Values (CSV) file to HTML document.",
        "operationId": "ConvertDocument_CsvToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/csv/multi/to/xlsx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Multiple CSV Files into a Single XLSX Spreadsheet",
        "description": "Convert multiple Comma-Separated Values (CSV) files into a single Excel XLSX Spreadsheet, with one worksheet corresponding to each CSV file.",
        "operationId": "ConvertDocument_CsvMultiToXlsx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "worksheetNames",
            "in": "header",
            "description": "Optional; Specify the name of each CSV's worksheet in order, separated with commas (e.g. \"worksheet1,worksheet2,worksheet3\"). Defaults to the names of the input CSV files. Recommended when inputting the files directly, without file names.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/csv": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLSX Spreadsheet to CSV, Single Worksheet",
        "description": "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.  If the input file contains multiple worksheets, the first one is used.  If you wish to convert all of the worksheets (not just the first one), be sure to use the xlsx/to/csv/multi API.",
        "operationId": "ConvertDocument_XlsxToCsv",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "outputEncoding",
            "in": "header",
            "description": "Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/csv/multi": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLSX Spreadsheet to CSV, Multiple Worksheets",
        "description": "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format, with support for multiple worksheets.  Supports both XLSX and XLSB file Excel formats.  Returns multiple CSV files, one for each worksheet (tab) in the spreadsheet.",
        "operationId": "ConvertDocument_XlsxToCsvMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "outputEncoding",
            "in": "header",
            "description": "Optional, set the output text encoding for the result; possible values are UTF-8, ASCII and UTF-32.  Default is UTF-8.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CsvCollection"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/xlsx/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Excel XLSX spreadsheet to PNG image array",
        "description": "Converts an Excel Spreadsheet (XLSX) file to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_XlsxToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/XlsxToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/html/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert HTML document file to PDF Document",
        "description": "Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to PDF.  To use external files such as images, use an absolute URL to the file.",
        "operationId": "ConvertDocument_HtmlToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "includeBackgroundGraphics",
            "in": "header",
            "description": "Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "scaleFactor",
            "in": "header",
            "description": "Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/html/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert HTML document file to PNG image array",
        "description": "Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to an array of PNG images, one for each page.  To use external files in your HTML such as images, use an absolute URL to the file.",
        "operationId": "ConvertDocument_HtmlToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/html/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "HTML Document file to Text (txt)",
        "description": "HTML document to text",
        "operationId": "ConvertDocument_HtmlToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/get-info": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Get document type information",
        "description": "Auto-detects a document's type information; does not require file extension.  Analyzes file contents to confirm file type.  Even if no file extension is present, the auto-detect system will reliably analyze the contents of the file and identify its file type.  Supports over 100 image file formats, Office document file formats, PDF, and more.",
        "operationId": "ConvertDocument_AutodetectGetInfo",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectGetInfoResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/get-icon/advanced": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Get PNG icon byte array for the file extension",
        "description": "Returns a PNG icon for the given file format extension directly as a byte array. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.",
        "operationId": "ConvertDocument_GetFileTypeIconAdvanced",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "fileExtension",
            "in": "header",
            "description": "Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters.",
            "required": true,
            "type": "string"
          },
          {
            "name": "iconSize",
            "in": "header",
            "description": "Optional; The desired width of the icon, preserving its aspect ratio.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetFileTypeIconResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/get-icon": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Get PNG icon file for the file extension",
        "description": "Returns a PNG icon for the given file format extension as a file for download. User may specify the icon size. Supports over 100 file formats, with a generic icon for unsupported formats.",
        "operationId": "ConvertDocument_GetFileTypeIcon",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "fileExtension",
            "in": "header",
            "description": "Required; The file extension to be used for the icon. Limited to 4 AlphaNumeric characters.",
            "required": true,
            "type": "string"
          },
          {
            "name": "iconSize",
            "in": "header",
            "description": "Optional; The desired width of the icon, preserving its aspect ratio.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Document to PDF",
        "description": "Automatically detect file type and convert it to PDF.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files.",
        "operationId": "ConvertDocument_AutodetectToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Document to Text (txt)",
        "description": "Automatically detect file type and convert it to Text.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.  For spreadsheets, all worksheets will be included.  If you wish to exclude certain pages, worksheets, slides, etc. use the Split document API first, or the delete pages/slides/worksheet APIs first to adjust the document to the target state prior to converting to text.",
        "operationId": "ConvertDocument_AutodetectToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "textFormattingMode",
            "in": "header",
            "description": "Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Document to PNG array",
        "description": "Automatically detect file type and convert it to an array of PNG images.  Supports all of the major Office document file formats, over 100 image formats, and even multi-page TIFF files.",
        "operationId": "ConvertDocument_AutodetectToPngArray",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Document to JPG/JPEG image array",
        "description": "Automatically detect file type and convert it to an array of JPG/JPEG Images.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Customize image quality using quality header.",
        "operationId": "ConvertDocument_AutodetectToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/to/thumbnail/advanced": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert File to Thumbnail Image Object",
        "description": "Automatically detect file type and convert it to an array of PNG thumbnails, returned as an object. May specify the number of pages for multiple thumbnails; default is one thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048.",
        "operationId": "ConvertDocument_AutodetectToThumbnailsAdvanced",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pages",
            "in": "header",
            "description": "Optional; Specify how many pages of the document will be converted to thumbnails. Default is 1 page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxWidth",
            "in": "header",
            "description": "Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxHeight",
            "in": "header",
            "description": "Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "extension",
            "in": "header",
            "description": "Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectToThumbnailsResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/autodetect/to/thumbnail": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert File to Thumbnail Image",
        "description": "Automatically detect file type and convert it to a PNG thumbnail. Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files. Returns a generic PNG thumbnail for unsupported formats. Maximum thumbnail size is 2048x2048.",
        "operationId": "ConvertDocument_AutodetectToThumbnail",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "maxWidth",
            "in": "header",
            "description": "Optional; Maximum width of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxHeight",
            "in": "header",
            "description": "Optional; Maximum height of the output thumbnail - final image will be as large as possible while less than or equal to this width. Default is 128.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "extension",
            "in": "header",
            "description": "Optional; Specify the file extension of the inputFile. This will improve the response time in most cases. Also allows unsupported files without extensions to still return a corresponding generic icon.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF to PNG Image Array",
        "description": "Convert PDF document to PNG array, one image per page.",
        "operationId": "ConvertDocument_PdfToPngArray",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF to JPG/JPEG image array",
        "description": "Converts a PDF Document to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_PdfToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/png/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PNG Array to PDF",
        "description": "Convert an array of PNG images, one image per page, into a newly-created PDF.  Supports images of different sizes as input.",
        "operationId": "ConvertDocument_PngArrayToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/png/merge-single": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF to Single PNG image",
        "description": "Convert PDF document to a single tall PNG image, by stacking/concatenating the images vertically into a single \"tall\" image",
        "operationId": "ConvertDocument_PdfToPngSingle",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/txt": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF Document to Text (txt)",
        "description": "PDF document to text",
        "operationId": "ConvertDocument_PdfToTxt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "textFormattingMode",
            "in": "header",
            "description": "Optional; specify how whitespace should be handled when converting PDF to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/docx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF to Word DOCX Document",
        "description": "Convert standard PDF to Office Word Documents (docx).    Converts a PDF at high fidelity into Word format, where it can be easily edited and processed.",
        "operationId": "ConvertDocument_PdfToDocx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/docx/rasterize": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF to Word DOCX Document based on rasterized version of the PDF",
        "description": "Convert standard PDF to Office Word Documents (docx), but first rasterize the PDF.    Converts a PDF at high fidelity into Word format.",
        "operationId": "ConvertDocument_PdfToDocxRasterize",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/pdf/to/pptx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert PDF to PowerPoint PPTX Presentation",
        "description": "Convert standard PDF to Office PowerPoint Presentation (pptx).  Converts a PDF file at high fidelity into PowerPoint format, where it can be easily edited and processed.",
        "operationId": "ConvertDocument_PdfToPptx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/eml/to/html": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email EML file to HTML string",
        "description": "Convert Outlook Email EML file to HTML string and attachments. Supports images if they are base 64 inline.",
        "operationId": "ConvertDocument_EmlToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "bodyOnly",
            "in": "header",
            "description": "Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeAttachments",
            "in": "header",
            "description": "Optional; If false, the response object will not include any attachment files from the input file. Default is true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmlToHtmlResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/eml/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email EML file to PDF document",
        "description": "Convert Outlook Email EML file to PDF document. Supports images if they are base 64 inline.",
        "operationId": "ConvertDocument_EmlToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "bodyOnly",
            "in": "header",
            "description": "Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/eml/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email EML file to PNG image array",
        "description": "Converts an Outlook Email File (EML) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_EmlToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmlToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/eml/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email EML file to JPG/JPEG image array",
        "description": "Converts an Outlook Email File (EML) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_EmlToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmlToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/msg/to/html": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email MSG file to HTML string",
        "description": "Convert Outlook Email MSG file to HTML string and attachments. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.",
        "operationId": "ConvertDocument_MsgToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "bodyOnly",
            "in": "header",
            "description": "Optional; If true, the HTML string will only include the body of the MSG. Other information such as subject will still be given as properties in the response object. Default is false.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeAttachments",
            "in": "header",
            "description": "Optional; If false, the response object will not include any attachment files from the input file. Default is true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MsgToHtmlResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/msg/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email MSG file to PDF document",
        "description": "Convert Outlook Email MSG file to PDF document. Supports images if they are base 64 inline. Supports most, but not all, RTF bodied MSG files.",
        "operationId": "ConvertDocument_MsgToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "bodyOnly",
            "in": "header",
            "description": "Optional; If true, the HTML string will only include the body of the email. Other information such as subject will still be given as properties in the response object. Default is false.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/msg/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email MSG file to PNG image array",
        "description": "Converts an Outlook Email Message File (MSG) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_MsgToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MsgToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/msg/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Email MSG file to JPG/JPEG image array",
        "description": "Converts an Outlook Message File (MSG) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_MsgToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MsgToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odt/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODT Text File to PDF",
        "description": "Convert Office Open Document Text File (ODT) to standard PDF",
        "operationId": "ConvertDocument_OdtToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odt/to/docx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODT Text File to Word DOCX",
        "description": "Convert Office Open Document Text File (ODT) to Word DOCX Document",
        "operationId": "ConvertDocument_OdtToDocx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odt/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODT Text File to PNG image array",
        "description": "Converts an Office Open Document Text File (ODT) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_OdtToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OdtToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odt/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODT Text File to JPG/JPEG image array",
        "description": "Converts an Open Document Text File (ODT) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_OdtToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OdtToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/ods/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODS Spreadsheet to PDF",
        "description": "Convert Office Open Document Spreadsheet (ODS) to standard PDF",
        "operationId": "ConvertDocument_OdsToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/ods/to/xlsx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODS Spreadsheet to XLSX",
        "description": "Convert Office Open Document Spreadsheet (ODS) to Excel Spreadsheet (XLSX)",
        "operationId": "ConvertDocument_OdsToXlsx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/ods/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODS Spreadsheet to PNG image array",
        "description": "Converts an Office Open Document Spreadsheet (ODS) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_OdsToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OdsToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/ods/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODS Spreadsheet to JPG/JPEG image array",
        "description": "Converts an Open Document Spreadsheet (ODS) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_OdsToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OdsToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odp/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODP Presentation to PDF",
        "description": "Convert Office Open Document Presentation (ODP) to standard PDF",
        "operationId": "ConvertDocument_OdpToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odp/to/pptx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODP Presentation to PPTX",
        "description": "Convert Office Open Document Presentation (ODP) to PowerPoint Presentation (PPTX)",
        "operationId": "ConvertDocument_OdpToPptx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odp/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODP Presentation to PNG image array",
        "description": "Converts an Office Open Document Presentation (ODP) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_OdpToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OdpToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/odp/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert ODP Presentation to JPG/JPEG image array",
        "description": "Converts an Open Document Presentation (ODP) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_OdpToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OdpToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/key/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Keynote Presentation (KEY) to PDF",
        "description": "Convert Mac Keynote Presentation (KEY) to standard PDF",
        "operationId": "ConvertDocument_KeynoteToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/key/to/pptx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Keynote Presentation (KEY) to PPTX",
        "description": "Convert Mac Keynote Presentation (KEY) to PowerPoint Presentation (PPTX)",
        "operationId": "ConvertDocument_KeynoteToPptx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/key/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Keynote Presentation (KEY) to PNG image array",
        "description": "Converts a Mac Keynote Presentation (KEY) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_KeynoteToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeynoteToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/key/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Keynote Presentation (KEY) to JPG/JPEG image array",
        "description": "Converts a Mac Keynote Presentation (KEY) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_KeynoteToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeynoteToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/rtf/to/pdf": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Rich Text Format RTF to PDF",
        "description": "Convert Rich Text Format Document (RTF) to standard PDF",
        "operationId": "ConvertDocument_RtfToPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/rtf/to/html": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Rich Text Format RTF to HTML Document",
        "description": "Convert Rich Text Format Document (RTF) to HTML Document",
        "operationId": "ConvertDocument_RtfToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/rtf/to/docx": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Rich Text Format RTF to DOCX Document",
        "description": "Convert Rich Text Format Document (RTF) to Word DOCX Document",
        "operationId": "ConvertDocument_RtfToDocx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/rtf/to/png": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Rich Text Format RTF to PNG image array",
        "description": "Converts a Rich Text Format Document (RTF) to an array of PNG images, one for each page.",
        "operationId": "ConvertDocument_RtfToPng",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RtfToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/rtf/to/jpg": {
      "post": {
        "tags": [
          "ConvertDocument"
        ],
        "summary": "Convert Rich Text Format RTF to JPG/JPEG image array",
        "description": "Converts a Rich Text Format Document (RTF) to an array of JPG/JPEG images, one for each page. Customize image quality using quality header.",
        "operationId": "ConvertDocument_RtfToJpg",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "quality",
            "in": "header",
            "description": "Optional; Set the JPEG quality level; lowest quality is 1 (highest compression), highest quality (lowest compression) is 100; recommended value is 75. Default value is 75.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RtfToJpgResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/image/{format1}/to/{format2}": {
      "post": {
        "tags": [
          "ConvertImage"
        ],
        "summary": "Image format conversion",
        "description": "Convert between over 100 file formats, including key formats such as Photoshop (PSD), PNG, JPG, GIF, NEF, and BMP.",
        "operationId": "ConvertImage_ImageFormatConvert",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "format1",
            "in": "path",
            "description": "Input file format as a 3+ letter file extension.  You can also provide UNKNOWN for unknown file formats. Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV",
            "required": true,
            "type": "string"
          },
          {
            "name": "format2",
            "in": "path",
            "description": "Output (convert to this format) file format as a 3+ letter file extension.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/image-multipage/{format1}/to/{format2}": {
      "post": {
        "tags": [
          "ConvertImage"
        ],
        "summary": "Multi-page image format conversion",
        "description": "Convert between over 100 file formats, including support for Multiple-Page formats (e.g. PDFs, TIFFs, etc. with multiple pages).",
        "operationId": "ConvertImage_MultipageImageFormatConvert",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "format1",
            "in": "path",
            "description": "Input file format as a 3+ letter file extension.  You can also provide UNKNOWN for unknown file formats.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV",
            "required": true,
            "type": "string"
          },
          {
            "name": "format2",
            "in": "path",
            "description": "Output (convert to this format) file format as a 3+ letter file extension.  Supported formats include AAI, ART, ARW, AVS, BPG, BMP, BMP2, BMP3, BRF, CALS, CGM, CIN, CMYK, CMYKA, CR2, CRW, CUR, CUT, DCM, DCR, DCX, DDS, DIB, DJVU, DNG, DOT, DPX, EMF, EPDF, EPI, EPS, EPS2, EPS3, EPSF, EPSI, EPT, EXR, FAX, FIG, FITS, FPX, GIF, GPLT, GRAY, HDR, HEIC, HPGL, HRZ, ICO, ISOBRL, ISBRL6, JBIG, JNG, JP2, JPT, J2C, J2K, JPEG/JPG, JXR, MAT, MONO, MNG, M2V, MRW, MTV, NEF, ORF, OTB, P7, PALM, PAM, PBM, PCD, PCDS, PCL, PCX, PDF, PEF, PES, PFA, PFB, PFM, PGM, PICON, PICT, PIX, PNG, PNG8, PNG00, PNG24, PNG32, PNG48, PNG64, PNM, PPM, PSB, PSD, PTIF, PWB, RAD, RAF, RGB, RGBA, RGF, RLA, RLE, SCT, SFW, SGI, SID, SUN, SVG, TGA, TIFF, TIM, UIL, VIFF, VICAR, VBMP, WDP, WEBP, WPG, X, XBM, XCF, XPM, XWD, X3F, YCbCr, YCbCrA, YUV",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipageImageFormatConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/image/set-dpi/{dpi}": {
      "post": {
        "tags": [
          "ConvertImage"
        ],
        "summary": "Change image DPI",
        "description": "Resize an image to have a different DPI",
        "operationId": "ConvertImage_ImageSetDPI",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "dpi",
            "in": "path",
            "description": "New DPI in pixels-per-inch, for example 300 DPI or 600 DPI",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/image/get-info": {
      "post": {
        "tags": [
          "ConvertImage"
        ],
        "summary": "Get information about an image",
        "description": "Get details from an image such as size, format and MIME type, compression, EXIF data such as location, DPI, unique colors, transparency information, and more",
        "operationId": "ConvertImage_GetImageInfo",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetImageInfoResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/template/html/apply": {
      "post": {
        "tags": [
          "ConvertTemplate"
        ],
        "summary": "Apply HTML template",
        "description": "Apply operations to fill in an HTML template, generating a final HTML result",
        "operationId": "ConvertTemplate_ApplyHtmlTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Operations to apply to template",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlTemplateApplicationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HtmlTemplateApplicationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/template/docx/apply": {
      "post": {
        "tags": [
          "ConvertTemplate"
        ],
        "summary": "Apply Word DOCX template",
        "description": "Apply operations to fill in a Word DOCX template by replacing target template/placeholder strings in the DOCX with values, generating a final Word DOCX result.  For example, you could create a Word Document invoice containing strings such as \"{FirstName}\" and \"{LastName}\" and then replace these values with \"John\" and \"Smith\".",
        "operationId": "ConvertTemplate_ApplyDocxTemplate",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "templateDefinition",
            "in": "header",
            "description": "Template definition for the document, including what values to replace",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocxTemplateApplicationRequest"
            },
            "type": "application/json"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/url/to/screenshot": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Take screenshot of URL",
        "description": "Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_UrlToScreenshot",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Screenshot request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScreenshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/url/to/pdf": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert a URL to PDF",
        "description": "Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_UrlToPdf",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "URL to PDF request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UrlToPdfRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/url/to/txt": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert website URL page to text (txt)",
        "description": "Converts a website URL page into text (txt); extracts text from HTML",
        "operationId": "ConvertWeb_UrlToTxt",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "HTML to Text request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UrlToTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UrlToTextResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/html/to/pdf": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert HTML string to PDF",
        "description": "Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_HtmlToPdf",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "HTML to PDF request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToPdfRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/html/to/png": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert HTML string to PNG screenshot",
        "description": "Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_HtmlToPng",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "HTML to PNG request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToPngRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/html/to/txt": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert HTML string to text (txt)",
        "description": "Converts an HTML string input into text (txt); extracts text from HTML",
        "operationId": "ConvertWeb_HtmlToTxt",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "HTML to Text request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HtmlToTextResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/html/to/docx": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert HTML to Word DOCX Document",
        "description": "Convert HTML to Office Word Document (DOCX) format",
        "operationId": "ConvertWeb_HtmlToDocx",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputRequest",
            "in": "body",
            "description": "HTML input to convert to DOCX",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToOfficeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/web/md/to/html": {
      "post": {
        "tags": [
          "ConvertWeb"
        ],
        "summary": "Convert Markdown to HTML",
        "description": "Convert a markdown file (.md) to HTML",
        "operationId": "ConvertWeb_MdToHtml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HtmlMdResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/begin-editing": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Begin editing a document",
        "description": "Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.",
        "operationId": "EditDocument_BeginEditing",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/finish-editing": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Finish editing document, and download result from document editing",
        "description": "Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.",
        "operationId": "EditDocument_FinishEditing",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Cloudmersive Document URL to complete editing on",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinishEditingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/create/blank": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Create a blank Word DOCX document",
        "description": "Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.",
        "operationId": "EditDocument_DocxCreateBlankDocument",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBlankDocxRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateBlankDocxResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/replace-all": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Replace string in Word DOCX document",
        "description": "Replace all instances of a string in an Office Word Document (docx)",
        "operationId": "EditDocument_DocxReplace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document string replacement configuration input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceStringRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/replace-all/multi": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Replace multiple strings in Word DOCX document",
        "description": "Replace all instances of multiple strings in an Office Word Document (docx)",
        "operationId": "EditDocument_DocxReplaceMulti",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document string replacement configuration input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiReplaceStringRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pptx/replace-all": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Replace string in PowerPoint PPTX presentation",
        "description": "Replace all instances of a string in an Office PowerPoint Document (pptx)",
        "operationId": "EditDocument_PptxReplace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Replacement document configuration input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceStringRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-tables": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get all tables in Word DOCX document",
        "description": "Returns all the table objects in an Office Word Document (docx)",
        "operationId": "EditDocument_DocxGetTables",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxTablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxTablesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-table/by-index": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get a specific table by index in a Word DOCX document",
        "description": "Returns the specific table object by its 0-based index in an Office Word Document (DOCX)",
        "operationId": "EditDocument_DocxGetTableByIndex",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxTableByIndexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxTableByIndexResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-images": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get images from a Word DOCX document",
        "description": "Returns the images defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetImages",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxImagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxImagesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-styles": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get styles from a Word DOCX document",
        "description": "Returns the styles defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetStyles",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxStylesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxStylesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-sections": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get sections from a Word DOCX document",
        "description": "Returns the sections defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetSections",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxSectionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxSectionsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-body": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get body from a Word DOCX document",
        "description": "Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document",
        "operationId": "EditDocument_DocxBody",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxBodyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxBodyResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/find/paragraph": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Find matching paragraphs in a Word DOCX document",
        "description": "Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria",
        "operationId": "EditDocument_DocxFindParagraph",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindDocxParagraphRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FindDocxParagraphResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/replace/paragraph": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Replace matching paragraphs in a Word DOCX document",
        "description": "Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.",
        "operationId": "EditDocument_DocxReplaceParagraph",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceDocxParagraphRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReplaceDocxParagraphResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-pages": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get pages and content from a Word DOCX document",
        "description": "Returns the pages and contents of each page defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxPages",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxPagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxPagesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-comments/flat-list": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get comments from a Word DOCX document as a flat list",
        "description": "Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).",
        "operationId": "EditDocument_DocxGetComments",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxGetCommentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxCommentsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-comments/hierarchical": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get comments from a Word DOCX document hierarchically",
        "description": "Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.",
        "operationId": "EditDocument_DocxGetCommentsHierarchical",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxGetCommentsHierarchicalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxCommentsHierarchicalResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/insert-comment/on/paragraph": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Insert a new comment into a Word DOCX document attached to a paragraph",
        "description": "Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertCommentOnParagraph",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxInsertCommentOnParagraphRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxCommentOnParagraphResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/delete-pages": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Delete, remove pages from a Word DOCX document",
        "description": "Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed",
        "operationId": "EditDocument_DocxDeletePages",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveDocxPagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-headers-and-footers": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get content of a footer from a Word DOCX document",
        "description": "Returns the footer content from a Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetHeadersAndFooters",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxHeadersAndFootersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxHeadersAndFootersResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/set-header": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Set the header in a Word DOCX document",
        "description": "Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxSetHeader",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxSetHeaderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxSetHeaderResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/set-footer": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Set the footer in a Word DOCX document",
        "description": "Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxSetFooter",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxSetFooterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxSetFooterResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/set-footer/add-page-number": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Add page number to footer in a Word DOCX document",
        "description": "Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxSetFooterAddPageNumber",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxSetFooterAddPageNumberRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxSetFooterResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/insert-image": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Insert image into a Word DOCX document",
        "description": "Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertImage",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxInsertImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxInsertImageResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/insert-paragraph": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Insert a new paragraph into a Word DOCX document",
        "description": "Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertParagraph",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDocxInsertParagraphRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxInsertParagraphResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/insert-table": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Insert a new table into a Word DOCX document",
        "description": "Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertTable",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDocxTablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxTablesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/get-table-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Gets the contents of an existing table row in an existing table in a Word DOCX document",
        "description": "Gets the contents of an existing table row in a Word DOCX Document and returns the result.",
        "operationId": "EditDocument_DocxGetTableRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxTableRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxTableRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/delete-table-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Deletes a table row in an existing table in a Word DOCX document",
        "description": "Deletes an existing table row in a Word DOCX Document and returns the result.",
        "operationId": "EditDocument_DocxDeleteTableRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDocxTableRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteDocxTableRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/delete-table-row/range": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Deletes a range of multiple table rows in an existing table in a Word DOCX document",
        "description": "Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.",
        "operationId": "EditDocument_DocxDeleteTableRowRange",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDocxTableRowRangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteDocxTableRowRangeResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/insert-table-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Insert a new row into an existing table in a Word DOCX document",
        "description": "Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertTableRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDocxTableRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxTableRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/update-table-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Update, set contents of a table row in an existing table in a Word DOCX document",
        "description": "Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxUpdateTableRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocxTableRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateDocxTableRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/update-table-cell": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Update, set contents of a table cell in an existing table in a Word DOCX document",
        "description": "Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxUpdateTableCell",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocxTableCellRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateDocxTableCellResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/remove-headers-and-footers": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Remove headers and footers from Word DOCX document",
        "description": "Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxRemoveHeadersAndFooters",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveDocxHeadersAndFootersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveDocxHeadersAndFootersResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/docx/remove-object": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Delete any object in a Word DOCX document",
        "description": "Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxRemoveObject",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxRemoveObjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxRemoveObjectResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/create/blank": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Create a blank Excel XLSX spreadsheet",
        "description": "Returns a blank Excel XLSX Spreadsheet (XLSX) format file",
        "operationId": "EditDocument_XlsxCreateBlankSpreadsheet",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBlankSpreadsheetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateBlankSpreadsheetResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/create/from/data": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Create a new Excel XLSX spreadsheet from column and row data",
        "description": "Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input",
        "operationId": "EditDocument_XlsxCreateSpreadsheetFromData",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSpreadsheetFromDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateSpreadsheetFromDataResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-worksheets": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get worksheets from a Excel XLSX spreadsheet",
        "description": "Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file",
        "operationId": "EditDocument_XlsxGetWorksheets",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxWorksheetsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxWorksheetsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-rows-and-cells": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get rows and cells from a Excel XLSX spreadsheet, worksheet",
        "description": "Returns the rows and cells defined in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetRowsAndCells",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxRowsAndCellsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxRowsAndCellsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-specific-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get a specific row from a Excel XLSX spreadsheet, worksheet by path",
        "description": "Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.",
        "operationId": "EditDocument_XlsxGetSpecificRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxSpecificRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxSpecificRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/clear-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Clear row from a Excel XLSX spreadsheet, worksheet",
        "description": "Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.",
        "operationId": "EditDocument_XlsxClearRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClearXlsxRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClearXlsxRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/append-row": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Append row to a Excel XLSX spreadsheet, worksheet",
        "description": "Appends a row to the end of an Excel Spreadsheet worksheet.",
        "operationId": "EditDocument_XlsxAppendRow",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppendXlsxRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppendXlsxRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/delete-worksheet": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Delete, remove worksheet from an Excel XLSX spreadsheet document",
        "description": "Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.",
        "operationId": "EditDocument_XlsxDeleteWorksheet",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Spreadsheet input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveXlsxWorksheetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-cell/by-index": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get cell from an Excel XLSX spreadsheet, worksheet by index",
        "description": "Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetCellByIndex",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxCellRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxCellResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-cell/by-identifier": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier",
        "description": "Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetCellByIdentifier",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxCellByIdentifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxCellByIdentifierResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/clear-cell/by-index": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Clear cell contents in an Excel XLSX spreadsheet, worksheet by index",
        "description": "Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet",
        "operationId": "EditDocument_XlsxClearCellByIndex",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClearXlsxCellRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClearXlsxCellResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/set-cell/by-index": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index",
        "description": "Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet",
        "operationId": "EditDocument_XlsxSetCellByIndex",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetXlsxCellRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SetXlsxCellResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/set-cell/by-identifier": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier",
        "description": "Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet",
        "operationId": "EditDocument_XlsxSetCellByIdentifier",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetXlsxCellByIdentifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SetXlsxCellByIdentifierResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-columns": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get columns from a Excel XLSX spreadsheet, worksheet",
        "description": "Returns the columns defined in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetColumns",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxColumnsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxColumnsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-images": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get images from a Excel XLSX spreadsheet, worksheet",
        "description": "Returns the images defined in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetImages",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxImagesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxImagesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/get-styles": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Get styles from a Excel XLSX spreadsheet, worksheet",
        "description": "Returns the style defined in the Excel Spreadsheet",
        "operationId": "EditDocument_XlsxGetStyles",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxStylesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxStylesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/insert-worksheet": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Insert a new worksheet into an Excel XLSX spreadsheet",
        "description": "Inserts a new worksheet into an Excel Spreadsheet",
        "operationId": "EditDocument_XlsxInsertWorksheet",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertXlsxWorksheetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertXlsxWorksheetResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/rename-worksheet": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Rename a specific worksheet in a Excel XLSX spreadsheet",
        "description": "Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.",
        "operationId": "EditDocument_XlsxRenameWorksheet",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RenameXlsxWorksheetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RenameXlsxWorksheetResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/configuration/enable-shared-workbook": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Enable Shared Workbook (legacy) in Excel XLSX spreadsheet",
        "description": "Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet",
        "operationId": "EditDocument_XlsxEnableSharedWorkbook",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnableSharedWorkbookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnableSharedWorkbookResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/xlsx/configuration/disable-shared-workbook": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Disable Shared Workbook (legacy) in Excel XLSX spreadsheet",
        "description": "Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet",
        "operationId": "EditDocument_XlsxDisableSharedWorkbook",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Document input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableSharedWorkbookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisableSharedWorkbookResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pptx/delete-slides": {
      "post": {
        "tags": [
          "EditDocument"
        ],
        "summary": "Delete, remove slides from a PowerPoint PPTX presentation document",
        "description": "Edits the input PowerPoint PPTX presentation document to remove the specified slides",
        "operationId": "EditDocument_PptxDeleteSlides",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "reqConfig",
            "in": "body",
            "description": "Presentation input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemovePptxSlidesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/html/append/heading": {
      "post": {
        "tags": [
          "EditHtml"
        ],
        "summary": "Append a Heading to an HTML Document",
        "description": "Appends a heading to the end of an HTML document.",
        "operationId": "EditHtml_HtmlAppendHeading",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Optional: Input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFileUrl",
            "in": "header",
            "description": "Optional: URL of a file to operate on as input.",
            "required": false,
            "type": "string"
          },
          {
            "name": "headingText",
            "in": "header",
            "description": "The text content to be used in the header.",
            "required": true,
            "type": "string"
          },
          {
            "name": "headingSize",
            "in": "header",
            "description": "Optional: The heading size number. Default is 1. Accepts values between 1 and 6.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "cssStyle",
            "in": "header",
            "description": "Optional: The CSS style for the heading.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/html/append/paragraph": {
      "post": {
        "tags": [
          "EditHtml"
        ],
        "summary": "Append a Paragraph to an HTML Document",
        "description": "Appends a paragraph to the end of an HTML document.",
        "operationId": "EditHtml_HtmlAppendParagraph",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Optional: Input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFileUrl",
            "in": "header",
            "description": "Optional: URL of a file to operate on as input.",
            "required": false,
            "type": "string"
          },
          {
            "name": "paragraphText",
            "in": "header",
            "description": "The text content to be used in the paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cssStyle",
            "in": "header",
            "description": "Optional: The CSS style for the paragraph.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/html/append/image/from-url": {
      "post": {
        "tags": [
          "EditHtml"
        ],
        "summary": "Append an Image to an HTML Document from a URL",
        "description": "Appends an image to the end of an HTML document using a URL.",
        "operationId": "EditHtml_HtmlAppendImageFromUrl",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Optional: Input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFileUrl",
            "in": "header",
            "description": "Optional: URL of a file to operate on as input.",
            "required": false,
            "type": "string"
          },
          {
            "name": "imageUrl",
            "in": "header",
            "description": "The URL for the image.",
            "required": true,
            "type": "string"
          },
          {
            "name": "cssStyle",
            "in": "header",
            "description": "Optional: CSS style for the image.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/html/append/image/inline": {
      "post": {
        "tags": [
          "EditHtml"
        ],
        "summary": "Append a Base64 Inline Image to an HTML Document",
        "description": "Appends a base64 inline image to the end of an HTML document from an input file or URL.",
        "operationId": "EditHtml_HtmlAppendImageInline",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Optional: Input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFileUrl",
            "in": "header",
            "description": "Optional: URL of a file to operate on as input.",
            "required": false,
            "type": "string"
          },
          {
            "name": "imageFile",
            "in": "formData",
            "description": "Optional: Image file to be appended as base64 inline image.",
            "required": false,
            "type": "file"
          },
          {
            "name": "imageUrl",
            "in": "header",
            "description": "Optional: Image URL to be appended as base64 inline image.",
            "required": false,
            "type": "string"
          },
          {
            "name": "cssStyle",
            "in": "header",
            "description": "Optional: CSS style for the image.",
            "required": false,
            "type": "string"
          },
          {
            "name": "imageExtension",
            "in": "header",
            "description": "Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/html/create/blank": {
      "post": {
        "tags": [
          "EditHtml"
        ],
        "summary": "Create a Blank HTML Document",
        "description": "Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.",
        "operationId": "EditHtml_HtmlCreateBlankDocument",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "header",
            "description": "Optional: The title of the HTML document",
            "required": false,
            "type": "string"
          },
          {
            "name": "cssUrl",
            "in": "header",
            "description": "Optional: A CSS style URL to be added to the document.",
            "required": false,
            "type": "string"
          },
          {
            "name": "cssInline",
            "in": "header",
            "description": "Optional: An inline CSS style to be added to the document.",
            "required": false,
            "type": "string"
          },
          {
            "name": "javascriptUrl",
            "in": "header",
            "description": "Optional: Javascript URL to be added to the document.",
            "required": false,
            "type": "string"
          },
          {
            "name": "javascriptInline",
            "in": "header",
            "description": "Optional: Inline Javascript to be added to the document.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/encrypt": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Encrypt and password-protect a PDF",
        "description": "Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.",
        "operationId": "EditPdf_Encrypt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "userPassword",
            "in": "header",
            "description": "Password of a user (reader) of the PDF file",
            "required": false,
            "type": "string"
          },
          {
            "name": "ownerPassword",
            "in": "header",
            "description": "Password of a owner (creator/editor) of the PDF file",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptionKeyLength",
            "in": "header",
            "description": "Possible values are \"128\" (128-bit RC4 encryption) and \"256\" (256-bit AES encryption).  Default is 256.",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/encrypt/set-permissions": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Encrypt, password-protect and set restricted permissions on a PDF",
        "description": "Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).",
        "operationId": "EditPdf_SetPermissions",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "ownerPassword",
            "in": "header",
            "description": "Password of a owner (creator/editor) of the PDF file (required)",
            "required": true,
            "type": "string"
          },
          {
            "name": "userPassword",
            "in": "header",
            "description": "Password of a user (reader) of the PDF file (optional)",
            "required": true,
            "type": "string"
          },
          {
            "name": "encryptionKeyLength",
            "in": "header",
            "description": "Possible values are \"128\" (128-bit RC4 encryption) and \"256\" (256-bit AES encryption).  Default is 256.",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowPrinting",
            "in": "header",
            "description": "Set to false to disable printing through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowDocumentAssembly",
            "in": "header",
            "description": "Set to false to disable document assembly through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowContentExtraction",
            "in": "header",
            "description": "Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowFormFilling",
            "in": "header",
            "description": "Set to false to disable filling out form fields in the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowEditing",
            "in": "header",
            "description": "Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowAnnotations",
            "in": "header",
            "description": "Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowDegradedPrinting",
            "in": "header",
            "description": "Set to false to disable degraded printing of the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/decrypt": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Decrypt and password-protect a PDF",
        "description": "Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.",
        "operationId": "EditPdf_Decrypt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "header",
            "description": "Valid password for the PDF file",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/watermark/text": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Add a text watermark to a PDF",
        "description": "Adds a text watermark to a PDF",
        "operationId": "EditPdf_WatermarkText",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "watermarkText",
            "in": "header",
            "description": "Watermark text to add to the PDF (required)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fontName",
            "in": "header",
            "description": "Font Family Name for the watermark text; default is Times New Roman",
            "required": false,
            "type": "string"
          },
          {
            "name": "fontSize",
            "in": "header",
            "description": "Font Size in points of the text; default is 150",
            "required": false,
            "type": "number"
          },
          {
            "name": "fontColor",
            "in": "header",
            "description": "Font color in hexadecimal or HTML color name; default is Red",
            "required": false,
            "type": "string"
          },
          {
            "name": "fontTransparency",
            "in": "header",
            "description": "Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5",
            "required": false,
            "type": "number"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/rasterize": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Rasterize a PDF to an image-based PDF",
        "description": "Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.",
        "operationId": "EditPdf_Rasterize",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/delete": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Remove, delete pages from a PDF document",
        "description": "Remove one or more pages from a PDF document",
        "operationId": "EditPdf_DeletePages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pageStart",
            "in": "header",
            "description": "Page number (1 based) to start deleting pages from (inclusive).",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEnd",
            "in": "header",
            "description": "Page number (1 based) to stop deleting pages from (inclusive).",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/insert": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Insert, copy pages from one PDF document into another",
        "description": "Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).",
        "operationId": "EditPdf_InsertPages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "sourceFile",
            "in": "formData",
            "description": "Source PDF file to copy pages from.",
            "required": true,
            "type": "file"
          },
          {
            "name": "destinationFile",
            "in": "formData",
            "description": "Destination PDF file to copy pages into.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pageStartSource",
            "in": "header",
            "description": "Page number (1 based) to start copying pages from (inclusive) in the Source file.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEndSource",
            "in": "header",
            "description": "Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageInsertBeforeDesitnation",
            "in": "header",
            "description": "Page number (1 based) to insert the pages before in the Destination file.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/get-text": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get text in a PDF document by page",
        "description": "Gets the text in a PDF by page",
        "operationId": "EditPdf_GetPdfTextByPages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "textFormattingMode",
            "in": "header",
            "description": "Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfTextByPageResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/rotate/all": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Rotate all pages in a PDF document",
        "description": "Rotate all of the pages in a PDF document by a multiple of 90 degrees",
        "operationId": "EditPdf_RotateAllPages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "rotationAngle",
            "in": "header",
            "description": "The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/rotate/page-range": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Rotate a range, subset of pages in a PDF document",
        "description": "Rotate a range of specific pages in a PDF document by a multiple of 90 degrees",
        "operationId": "EditPdf_RotatePageRange",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "rotationAngle",
            "in": "header",
            "description": "The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageStart",
            "in": "header",
            "description": "Page number (1 based) to start rotating pages from (inclusive).",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEnd",
            "in": "header",
            "description": "Page number (1 based) to stop rotating pages from (inclusive).",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/get-metadata": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get PDF document metadata",
        "description": "Returns the metadata from the PDF document, including Title, Author, etc.",
        "operationId": "EditPdf_GetMetadata",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfMetadata"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/set-metadata": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Sets PDF document metadata",
        "description": "Sets (writes) metadata into the input PDF document, including Title, Author, etc.",
        "operationId": "EditPdf_SetMetadata",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPdfMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/form/get-fields": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Gets PDF Form fields and values",
        "description": "Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.",
        "operationId": "EditPdf_GetFormFields",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfFormFields"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/form/set-fields": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Sets ands fills PDF Form field values",
        "description": "Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.",
        "operationId": "EditPdf_SetFormFields",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "fieldValues",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPdfFormFieldsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/list": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get PDF annotations, including comments in the document",
        "description": "Enumerates the annotations, including comments and notes, in a PDF document.",
        "operationId": "EditPdf_GetAnnotations",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPdfAnnotationsResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/add-item": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Add one or more PDF annotations, comments in the PDF document",
        "description": "Adds one or more annotations, comments to a PDF document.",
        "operationId": "EditPdf_AddAnnotations",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPdfAnnotationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/remove-item": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Remove a specific PDF annotation, comment in the document",
        "description": "Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.",
        "operationId": "EditPdf_RemoveAnnotationItem",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "annotationIndex",
            "in": "header",
            "description": "The 0-based index of the annotation in the document",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/remove-all": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Remove all PDF annotations, including comments in the document",
        "description": "Removes all of the annotations, including comments and notes, in a PDF document.",
        "operationId": "EditPdf_RemoveAllAnnotations",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/resize": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Change PDF Document's Paper Size",
        "description": "Resizes a PDF document's paper size.",
        "operationId": "EditPdf_Resize",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "paperSize",
            "in": "header",
            "description": "The desired paper size for the resized PDF document. Size ranges from A7 (smallest) to A0 (largest).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/encoding/base64/detect": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Detect, check if text string is base 64 encoded",
        "description": "Checks, detects if input string is base 64 encoded",
        "operationId": "EditText_Base64Detect",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base64DetectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Base64DetectResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/encoding/base64/encode": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Base 64 encode, convert binary or file data to a text string",
        "description": "Encodes / converts binary or file data to a text string",
        "operationId": "EditText_Base64Encode",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base64EncodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Base64EncodeResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/encoding/base64/decode": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Base 64 decode, convert base 64 string to binary content",
        "description": "Decodes / converts base 64 UTF-8 text string to binary content",
        "operationId": "EditText_Base64Decode",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base64DecodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Base64DecodeResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/encoding/detect": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Detect text encoding of file",
        "description": "Checks text encoding of file",
        "operationId": "EditText_TextEncodingDetect",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextEncodingDetectResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/find/string": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Find a string in text input",
        "description": "Finds all occurrences of the input string in the input content, and returns the matches",
        "operationId": "EditText_FindSimple",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindStringSimpleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FindStringSimpleResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/find/regex": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Find a regular expression regex in text input",
        "description": "Find all occurrences of the input regular expression in the input content, and returns the matches",
        "operationId": "EditText_FindRegex",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FindStringRegexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FindStringRegexResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/replace/string": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Replace a string in text with another string value",
        "description": "Replaces all occurrences of the input string in the input content, and returns the result",
        "operationId": "EditText_ReplaceSimple",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceStringSimpleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReplaceStringSimpleResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/replace/regex": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Replace a string in text with a regex regular expression string",
        "description": "Replaces all occurrences of the input regular expression regex string in the input content, and returns the result",
        "operationId": "EditText_ReplaceRegex",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceStringRegexRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReplaceStringRegexResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/line-endings/detect": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Detect line endings of a text file",
        "description": "Detect line ending type (Windows, Unix or Mac) of an input file.",
        "operationId": "EditText_DetectLineEndings",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DetectLineEndingsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/line-endings/change": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Set, change line endings of a text file",
        "description": "Sets the line ending type of a text file; set to Windows, Unix or Mac.",
        "operationId": "EditText_ChangeLineEndings",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "lineEndingType",
            "in": "header",
            "description": "Required; 'Windows' will use carriage return and line feed, 'Unix' will use newline, and 'Mac' will use carriage return",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ChangeLineEndingResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/remove/html": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Remove HTML from text string",
        "description": "Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.",
        "operationId": "EditText_RemoveHtml",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveHtmlFromTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveHtmlFromTextResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/remove/whitespace/all": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Remove whitespace from text string",
        "description": "Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.",
        "operationId": "EditText_RemoveAllWhitespace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveWhitespaceFromTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveWhitespaceFromTextResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/text/remove/whitespace/trim": {
      "post": {
        "tags": [
          "EditText"
        ],
        "summary": "Trim leading and trailing whitespace from text string",
        "description": "Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.",
        "operationId": "EditText_TrimWhitespace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveWhitespaceFromTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveWhitespaceFromTextResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/docx": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Two Word DOCX Together",
        "description": "Combine two Office Word Documents (docx) into one single Office Word document",
        "operationId": "MergeDocument_Docx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/docx/multi": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Multple Word DOCX Together",
        "description": "Combine multiple Office Word Documents (docx) into one single Office Word document",
        "operationId": "MergeDocument_DocxMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/pptx": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Two PowerPoint PPTX Together",
        "description": "Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation",
        "operationId": "MergeDocument_Pptx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/pptx/multi": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Multple PowerPoint PPTX Together",
        "description": "Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation",
        "operationId": "MergeDocument_PptxMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/xlsx": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Two Excel XLSX Together",
        "description": "Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet",
        "operationId": "MergeDocument_Xlsx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/xlsx/multi": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Multple Excel XLSX Together",
        "description": "Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet",
        "operationId": "MergeDocument_XlsxMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/pdf": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Two PDF Files Together",
        "description": "Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document",
        "operationId": "MergeDocument_Pdf",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/pdf/multi": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Multple PDF Files Together",
        "description": "Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document",
        "operationId": "MergeDocument_PdfMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/txt": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Two Text (TXT) Files Together",
        "description": "Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.",
        "operationId": "MergeDocument_Txt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/txt/multi": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Multple Text (TXT) Files Together",
        "description": "Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.",
        "operationId": "MergeDocument_TxtMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/png/vertical": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Two PNG Files Together",
        "description": "Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically",
        "operationId": "MergeDocument_Png",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/merge/png/vertical/multi": {
      "post": {
        "tags": [
          "MergeDocument"
        ],
        "summary": "Merge Multple PNG Files Together",
        "description": "Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically",
        "operationId": "MergeDocument_PngMulti",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/split/docx": {
      "post": {
        "tags": [
          "SplitDocument"
        ],
        "summary": "Split a single Word Document DOCX into Separate Documents by Page",
        "description": "Split a Word DOCX Document, comprised of multiple pages into separate Word DOCX document files, with each containing exactly one page.",
        "operationId": "SplitDocument_Docx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "returnDocumentContents",
            "in": "header",
            "description": "Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting document.  Default is true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitDocxDocumentResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/split/xlsx": {
      "post": {
        "tags": [
          "SplitDocument"
        ],
        "summary": "Split a single Excel XLSX into Separate Worksheets",
        "description": "Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.",
        "operationId": "SplitDocument_Xlsx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "returnDocumentContents",
            "in": "header",
            "description": "Set to true to return the contents of each Worksheet directly, set to false to only return URLs to each resulting worksheet.  Default is true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitXlsxWorksheetResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/split/pptx": {
      "post": {
        "tags": [
          "SplitDocument"
        ],
        "summary": "Split a single PowerPoint Presentation PPTX into Separate Slides",
        "description": "Split an PowerPoint PPTX Presentation, comprised of multiple slides into separate PowerPoint PPTX presentation files, with each containing exactly one slide.",
        "operationId": "SplitDocument_Pptx",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "returnDocumentContents",
            "in": "header",
            "description": "Set to true to return the contents of each presentation directly, set to false to only return URLs to each resulting presentation.  Default is true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitPptxPresentationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/split/pdf": {
      "post": {
        "tags": [
          "SplitDocument"
        ],
        "summary": "Split a PDF file into separate PDF files, one per page",
        "description": "Split an input PDF file into separate pages, comprised of one PDF file per page.",
        "operationId": "SplitDocument_PdfByPage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "returnDocumentContents",
            "in": "header",
            "description": "Set to true to directly return all of the document contents in the DocumentContents field; set to false to return contents as temporary URLs (more efficient for large operations).  Default is false.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitPdfResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/split/txt/by-line": {
      "post": {
        "tags": [
          "SplitDocument"
        ],
        "summary": "Split a single Text file (txt) into lines",
        "description": "Split a Text (txt) Document by line, returning each line separately in order.  Supports multiple types of newlines.",
        "operationId": "SplitDocument_TxtByLine",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitTextDocumentByLinesResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/split/txt/by-string": {
      "post": {
        "tags": [
          "SplitDocument"
        ],
        "summary": "Split a single Text file (txt) by a string delimiter",
        "description": "Split a Text (txt) Document by a string delimiter, returning each component of the string as an array of strings.",
        "operationId": "SplitDocument_TxtByString",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "splitDelimiter",
            "in": "header",
            "description": "Required; String to split up the input file on",
            "required": true,
            "type": "string"
          },
          {
            "name": "skipEmptyElements",
            "in": "header",
            "description": "Optional; If true, empty elements will be skipped in the output",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitTextDocumentByStringResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/transform/docx/replace-all": {
      "post": {
        "tags": [
          "TransformDocument"
        ],
        "summary": "Replace string in Word DOCX document",
        "description": "Replace all instances of a string in an Office Word Document (docx)",
        "operationId": "TransformDocument_DocxReplace",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Optional: Input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFileUrl",
            "in": "header",
            "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
            "required": false,
            "type": "string"
          },
          {
            "name": "matchString",
            "in": "header",
            "description": "String to search for and match against, to be replaced",
            "required": true,
            "type": "string"
          },
          {
            "name": "replaceString",
            "in": "header",
            "description": "String to replace the matched values with",
            "required": true,
            "type": "string"
          },
          {
            "name": "matchCase",
            "in": "header",
            "description": "Optional: True if the case should be matched, false for case insensitive match. Default is false.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/transform/pptx/replace-all": {
      "post": {
        "tags": [
          "TransformDocument"
        ],
        "summary": "Replace string in PowerPoint PPTX presentation",
        "description": "Replace all instances of a string in an Office PowerPoint Document (pptx)",
        "operationId": "TransformDocument_PptxReplace",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Optional: Input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFileUrl",
            "in": "header",
            "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
            "required": false,
            "type": "string"
          },
          {
            "name": "matchString",
            "in": "header",
            "description": "String to search for and match against, to be replaced",
            "required": true,
            "type": "string"
          },
          {
            "name": "replaceString",
            "in": "header",
            "description": "String to replace the matched values with",
            "required": true,
            "type": "string"
          },
          {
            "name": "matchCase",
            "in": "header",
            "description": "Optional: True if the case should be matched, false for case insensitive match. Default is false.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/autodetect": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Autodetect content type and validate",
        "description": "Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.",
        "operationId": "ValidateDocument_AutodetectValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectDocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/docx": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a Word document (DOCX)",
        "description": "Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_DocxValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/xlsx": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a Excel document (XLSX)",
        "description": "Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_XlsxValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/csv": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a CSV file document (CSV)",
        "description": "Validate a CSV file document (CSV); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_CsvValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/pptx": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a PowerPoint presentation (PPTX)",
        "description": "Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_PptxValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/zip": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a Zip Archive file (zip)",
        "description": "Validate a Zip archive file (ZIP)",
        "operationId": "ValidateDocument_ZipValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/gzip": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a GZip Archive file (gzip or gz)",
        "description": "Validate a GZip archive file (GZIP or GZ)",
        "operationId": "ValidateDocument_GZipValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/rar": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a RAR Archive file (RAR)",
        "description": "Validate a RAR archive file (RAR)",
        "operationId": "ValidateDocument_RarValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/tar": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a TAR Tarball Archive file (TAR)",
        "description": "Validate a TAR tarball archive file (TAR)",
        "operationId": "ValidateDocument_TarValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/pdf": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a PDF document file",
        "description": "Validate a PDF document; if the document is not valid, identifies the errors in the document.  Also checks if the PDF is password protected.",
        "operationId": "ValidateDocument_PdfValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/xml": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate an XML file",
        "description": "Validate an XML document file; if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_XmlValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/json": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate a JSON file",
        "description": "Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_JsonValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/executable": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate if a file is executable",
        "description": "Validate if an input file is a binary executable file; if the document is not valid",
        "operationId": "ValidateDocument_ExecutableValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/eml": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate if an EML file is executable",
        "description": "Validate if an input file is an EML email file; if the document is not valid",
        "operationId": "ValidateDocument_EmlValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/validate/msg": {
      "post": {
        "tags": [
          "ValidateDocument"
        ],
        "summary": "Validate if an MSG file is executable",
        "description": "Validate if an input file is an MSG email file; if the document is not valid",
        "operationId": "ValidateDocument_MsgValidation",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/viewer/create/web/simple": {
      "post": {
        "tags": [
          "ViewerTools"
        ],
        "summary": "Create a web-based viewer",
        "description": "Creates an HTML embed code for a simple web-based viewer of a document; supports Office document types and PDF.",
        "operationId": "ViewerTools_CreateSimple",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewerResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/archive/zip/create": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Compress files to create a new zip archive",
        "description": "Create a new zip archive by compressing input files.",
        "operationId": "ZipArchive_ZipCreate",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile1",
            "in": "formData",
            "description": "First input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "inputFile2",
            "in": "formData",
            "description": "Second input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile3",
            "in": "formData",
            "description": "Third input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile4",
            "in": "formData",
            "description": "Fourth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile5",
            "in": "formData",
            "description": "Fifth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile6",
            "in": "formData",
            "description": "Sixth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile7",
            "in": "formData",
            "description": "Seventh input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile8",
            "in": "formData",
            "description": "Eighth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile9",
            "in": "formData",
            "description": "Ninth input file to perform the operation on.",
            "required": false,
            "type": "file"
          },
          {
            "name": "inputFile10",
            "in": "formData",
            "description": "Tenth input file to perform the operation on.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/archive/zip/create/advanced": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Compress files and folders to create a new zip archive with advanced options",
        "description": "Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.",
        "operationId": "ZipArchive_ZipCreateAdvanced",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateZipArchiveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/archive/zip/extract": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Extract, decompress files and folders from a zip archive",
        "description": "Extracts a zip archive by decompressing files, and folders.",
        "operationId": "ZipArchive_ZipExtract",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ZipExtractResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/archive/zip/encrypt/advanced": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Encrypt and password protect a zip file",
        "description": "Encrypts and password protects an existing zip file with the specified password and encryption algorithm",
        "operationId": "ZipArchive_ZipEncryptAdvanced",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "encryptionRequest",
            "in": "body",
            "description": "Encryption request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZipEncryptionAdvancedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/archive/zip/decrypt": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Decrypt and remove password protection on a zip file",
        "description": "Decrypts and removes password protection from an encrypted zip file with the specified password",
        "operationId": "ZipArchive_ZipDecrypt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "zipPassword",
            "in": "header",
            "description": "Required; Password for the input archive",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    }
  },
  "definitions": {
    "XmlFilterWithXPathResult": {
      "description": "Result of performing a filter operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "XmlNodes": {
          "description": "Matching selected XML nodes as strings",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResultCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlQueryWithXQueryResult": {
      "description": "Result of performing an XQuery operation on an XML document.",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXml": {
          "description": "Resulting XML result output",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "If an error occurs, additional details on the error",
          "type": "string"
        }
      }
    },
    "XmlQueryWithXQueryMultiResult": {
      "description": "Result of performing an XQuery operation on multiple XML documents.",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXml": {
          "description": "Resulting XML result output",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "If an error occurs, additional details on the error",
          "type": "string"
        }
      }
    },
    "XmlSetValueWithXPathResult": {
      "description": "Result of performing a set value operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlReplaceWithXPathResult": {
      "description": "Result of performing a replace node operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlAddChildWithXPathResult": {
      "description": "Result of performing a add child node operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlAddAttributeWithXPathResult": {
      "description": "Result of performing a add attribute node operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlRemoveWithXPathResult": {
      "description": "Result of performing a filter operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document with matching nodes removed as a string",
          "type": "string"
        },
        "XmlNodesRemoved": {
          "description": "Matching selected XML nodes as strings",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NodesRemovedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlRemoveAllChildrenWithXPathResult": {
      "description": "Result of performing a remove all child nodes operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "TextConversionResult": {
      "description": "Text conversion result from converting a document to Plain Text (TXT) format",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "TextResult": {
          "description": "Plain Text (TXT) format conversion result of the input document.  The text result is returned as a string.",
          "type": "string"
        }
      }
    },
    "DocxToPngResult": {
      "description": "Result of converting a DOCX input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "ConvertedPngPage": {
      "description": "A single converted page",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PNG file of this page; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        }
      }
    },
    "DocxToJpgResult": {
      "description": "Result of converting a DOCX input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "ConvertedJpgPage": {
      "description": "A single converted page",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1",
          "type": "integer"
        },
        "Content": {
          "format": "byte",
          "description": "The JPG file of this page as a byte array",
          "type": "string"
        }
      }
    },
    "PptxToPngResult": {
      "description": "Result of converting a PPTX input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "CsvCollection": {
      "description": "Collection of CSV Files",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "CsvFiles": {
          "description": "Array of CSV File results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CsvFileResult"
          }
        },
        "FileCount": {
          "format": "int32",
          "description": "Count of the number of CSV files produced",
          "type": "integer"
        }
      }
    },
    "CsvFileResult": {
      "description": "CSV file result",
      "type": "object",
      "properties": {
        "Title": {
          "description": "Title of the CSV file",
          "type": "string"
        },
        "FileContents": {
          "format": "byte",
          "description": "Contents of the CSV file",
          "type": "string"
        }
      }
    },
    "XlsxToPngResult": {
      "description": "Result of converting an XLSX input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "PdfToPngResult": {
      "description": "Result of converting a PDF to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "AutodetectGetInfoResult": {
      "description": "Result of an autodetect/get-info operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "DetectedFileExtension": {
          "description": "Detected file extension of the file format, with a leading period",
          "type": "string"
        },
        "DetectedMimeType": {
          "description": "MIME type of this file extension",
          "type": "string"
        },
        "PageCount": {
          "format": "int64",
          "description": "Number of pages in a page-based document; for presentations, this is the number of slides and for a spreadsheet this is the number of worksheets.  Contains 0 when the page count cannot be determined, or if the concept of page count does not apply (e.g. for an image)",
          "type": "integer"
        },
        "Author": {
          "description": "User name of the creator/author of the document, if available, null if not available",
          "type": "string"
        },
        "DateModified": {
          "format": "date-time",
          "description": "The timestamp that the document was last modified, if available, null if not available",
          "type": "string"
        },
        "AlternateFileTypeCandidates": {
          "description": "Alternate file type options and their probability",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlternateFileFormatCandidate"
          }
        }
      }
    },
    "AlternateFileFormatCandidate": {
      "description": "Alternate file format possibility",
      "type": "object",
      "properties": {
        "Probability": {
          "format": "double",
          "description": "Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence)",
          "type": "number"
        },
        "DetectedFileExtension": {
          "description": "Detected file extension of the file format, with a leading period",
          "type": "string"
        },
        "DetectedMimeType": {
          "description": "MIME type of this file extension",
          "type": "string"
        }
      }
    },
    "GetFileTypeIconResult": {
      "description": "Result of getting a file type icon from a file extension",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Icon": {
          "format": "byte",
          "description": "PNG icon as a byte array",
          "type": "string"
        },
        "Extension": {
          "description": "Extension used for the icon",
          "type": "string"
        }
      }
    },
    "AutodetectToPngResult": {
      "description": "Result of converting an autodetected input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "AutodetectToJpgResult": {
      "description": "Result of converting a Autodetected Document input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "AutodetectToThumbnailsResult": {
      "description": "Result of converting an entire document to an array of PNG thumbnails",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "Index of this thumbnail",
          "type": "boolean"
        },
        "ThumbnailPages": {
          "description": "A PNG thumbnail of the document page",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Thumbnail"
          }
        }
      }
    },
    "Thumbnail": {
      "description": "Result of converting a single document page to a PNG thumbnail",
      "type": "object",
      "properties": {
        "Index": {
          "format": "int32",
          "description": "Index of this thumbnail",
          "type": "integer"
        },
        "Content": {
          "format": "byte",
          "description": "A PNG thumbnail of the document page",
          "type": "string"
        }
      }
    },
    "PdfToJpgResult": {
      "description": "Result of converting a PDF input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "EmlToHtmlResult": {
      "description": "Result of converting an EML file to HTML string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Content": {
          "description": "An HTML string version of the EML file",
          "type": "string"
        },
        "Body": {
          "description": "The main body of the EML file's email as an HTML string",
          "type": "string"
        },
        "From": {
          "description": "The From sender of the EML file's email",
          "type": "string"
        },
        "To": {
          "description": "The To recipients of the EML file's email",
          "type": "string"
        },
        "Cc": {
          "description": "The CC recipients of the EML file's email",
          "type": "string"
        },
        "DateSent": {
          "description": "The date and time that the EML file's email was sent",
          "type": "string"
        },
        "Subject": {
          "description": "The subject of the EML file's email",
          "type": "string"
        },
        "Attachments": {
          "description": "List of all attachments for the EML file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmlAttachment"
          }
        }
      }
    },
    "EmlAttachment": {
      "description": "An EML file attachment",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the attachment, including file extension",
          "type": "string"
        },
        "Content": {
          "format": "byte",
          "description": "The EML attachment as a byte[]",
          "type": "string"
        }
      }
    },
    "EmlToPngResult": {
      "description": "Result of converting an EML input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "EmlToJpgResult": {
      "description": "Result of converting an EML input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "MsgToHtmlResult": {
      "description": "Result of converting an MSG file to HTML string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Content": {
          "description": "An HTML string version of the MSG file",
          "type": "string"
        },
        "Body": {
          "description": "The main body of the MSG file's email as an HTML string",
          "type": "string"
        },
        "From": {
          "description": "The From sender of the MSG file's email",
          "type": "string"
        },
        "To": {
          "description": "The To recipients of the MSG file's email",
          "type": "string"
        },
        "Cc": {
          "description": "The CC recipients of the MSG file's email",
          "type": "string"
        },
        "ReceivedTime": {
          "description": "The time that the MSG file's email was received",
          "type": "string"
        },
        "Subject": {
          "description": "The subject of the MSG file's email",
          "type": "string"
        },
        "Attachments": {
          "description": "List of all attachments for the MSG file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MsgAttachment"
          }
        }
      }
    },
    "MsgAttachment": {
      "description": "An MSG file attachment",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the attachment, including file extension",
          "type": "string"
        },
        "Content": {
          "format": "byte",
          "description": "The MSG attachment as a byte[]",
          "type": "string"
        }
      }
    },
    "MsgToPngResult": {
      "description": "Result of converting a MSG input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "MsgToJpgResult": {
      "description": "Result of converting a MSG input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "OdtToPngResult": {
      "description": "Result of converting an ODT input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "OdtToJpgResult": {
      "description": "Result of converting an ODT input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "OdsToPngResult": {
      "description": "Result of converting an ODS input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "OdsToJpgResult": {
      "description": "Result of converting an ODS input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "OdpToPngResult": {
      "description": "Result of converting an ODP input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "OdpToJpgResult": {
      "description": "Result of converting an ODP input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "KeynoteToPngResult": {
      "description": "Result of converting a Keynote input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "KeynoteToJpgResult": {
      "description": "Result of converting a Keynote input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "RtfToPngResult": {
      "description": "Result of converting a RTF input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "RtfToJpgResult": {
      "description": "Result of converting a RTF input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "MultipageImageFormatConversionResult": {
      "description": "Result of converting a multi-page image into individual pages with a different format",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "PageCount": {
          "format": "int32",
          "description": "The number of pages in the converted output",
          "type": "integer"
        },
        "Pages": {
          "description": "Converted page results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PageConversionResult"
          }
        }
      }
    },
    "PageConversionResult": {
      "description": "Converted page as an image",
      "type": "object",
      "properties": {
        "Filename": {
          "description": "File name of the image in the converted file format",
          "type": "string"
        },
        "FileBytes": {
          "format": "byte",
          "description": "File bytes (contents) of the image in converted file format",
          "type": "string"
        }
      }
    },
    "GetImageInfoResult": {
      "description": "Result of running a get-info operation on an image",
      "type": "object",
      "properties": {
        "Successful": {
          "type": "boolean"
        },
        "ColorSpace": {
          "description": "Color space of the image",
          "type": "string"
        },
        "ColorType": {
          "description": "Color type of the image",
          "type": "string"
        },
        "Width": {
          "format": "int32",
          "description": "Width in pixels of the image",
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "description": "Height in pixels of the image",
          "type": "integer"
        },
        "CompressionLevel": {
          "format": "int32",
          "description": "Compression level value from 0 (lowest quality) to 100 (highest quality)",
          "type": "integer"
        },
        "ImageHashSignature": {
          "description": "SHA256 hash signature of the image",
          "type": "string"
        },
        "HasTransparency": {
          "description": "True if the image contains transparency, otherwise false",
          "type": "boolean"
        },
        "MimeType": {
          "description": "MIME type of the image format",
          "type": "string"
        },
        "ImageFormat": {
          "description": "Image format",
          "type": "string"
        },
        "DPIUnit": {
          "description": "Units of the DPI measurement; can be either in Inches or Centimeters",
          "type": "string"
        },
        "DPI": {
          "format": "double",
          "description": "DPI (pixels per unit, e.g. pixels per inch) of the image",
          "type": "number"
        },
        "ColorCount": {
          "format": "int32",
          "description": "Unique colors in the image",
          "type": "integer"
        },
        "BitDepth": {
          "format": "int32",
          "description": "Bit depth of the image",
          "type": "integer"
        },
        "Comment": {
          "description": "Comment string in the image",
          "type": "string"
        },
        "ExifProfileName": {
          "description": "Name of the EXIF profile used",
          "type": "string"
        },
        "ExifValues": {
          "description": "EXIF tags and values embedded in the image",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExifValue"
          }
        }
      }
    },
    "ExifValue": {
      "description": "EXIF tag and value",
      "type": "object",
      "properties": {
        "Tag": {
          "description": "Tag name for the EXIF value",
          "type": "string"
        },
        "DataType": {
          "description": "Date type of the EXIF value",
          "type": "string"
        },
        "DataValue": {
          "description": "Value, formatted as a string of the EXIF value",
          "type": "string"
        }
      }
    },
    "HtmlTemplateApplicationRequest": {
      "description": "HTML template application request",
      "type": "object",
      "properties": {
        "HtmlTemplate": {
          "description": "HTML template input as a string",
          "type": "string"
        },
        "HtmlTemplateUrl": {
          "description": "URL to HTML template input",
          "type": "string"
        },
        "Operations": {
          "description": "Operations to apply to this template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HtmlTemplateOperation"
          }
        }
      }
    },
    "HtmlTemplateOperation": {
      "type": "object",
      "properties": {
        "Action": {
          "format": "int32",
          "description": "Operation action to take; possible values are \"Replace\"",
          "enum": [
            1
          ],
          "type": "integer"
        },
        "MatchAgsint": {
          "description": "For Replace operations, the string to match against (to be replaced with ReplaceWith string)",
          "type": "string"
        },
        "ReplaceWith": {
          "description": "For Replace operations, the string to Replace the original string with",
          "type": "string"
        }
      }
    },
    "HtmlTemplateApplicationResponse": {
      "description": "Response from an HTML template application",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "FinalHtml": {
          "description": "Final HTML result of all operations on input",
          "type": "string"
        }
      }
    },
    "DocxTemplateApplicationRequest": {
      "description": "Word DOCX template application request",
      "type": "object",
      "properties": {
        "Operations": {
          "description": "Operations to apply to this template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTemplateOperation"
          }
        }
      }
    },
    "DocxTemplateOperation": {
      "type": "object",
      "properties": {
        "Action": {
          "format": "int32",
          "description": "Operation action to take; possible values are \"Replace\"",
          "enum": [
            1
          ],
          "type": "integer"
        },
        "MatchAgainst": {
          "description": "For Replace operations, the string to match against (to be replaced with ReplaceWith string)",
          "type": "string"
        },
        "ReplaceWith": {
          "description": "For Replace operations, the string to Replace the original string with",
          "type": "string"
        }
      }
    },
    "ScreenshotRequest": {
      "description": "Details of the screenshot request",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL address of the website to screenshot.  HTTP and HTTPS are both supported, as are custom ports.",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.  Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 20000 milliseconds (20 seconds).",
          "type": "integer"
        },
        "ScreenshotWidth": {
          "format": "int32",
          "description": "Optional: Width of the screenshot in pixels; supply 0 to default to 1280 x 1024",
          "type": "integer"
        },
        "ScreenshotHeight": {
          "format": "int32",
          "description": "Optional: Height of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "type": "integer"
        }
      }
    },
    "UrlToPdfRequest": {
      "description": "Request to convert a URL to a PDF file",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL address of the website to screenshot.  HTTP and HTTPS are both supported, as are custom ports.",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.  Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 20000 milliseconds (20 seconds).",
          "type": "integer"
        },
        "IncludeBackgroundGraphics": {
          "description": "Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.",
          "type": "boolean"
        },
        "ScaleFactor": {
          "format": "int32",
          "description": "Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%",
          "type": "integer"
        }
      }
    },
    "UrlToTextRequest": {
      "description": "Details of the URL website to Text request",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL of the website to extract the text from",
          "type": "string"
        }
      }
    },
    "UrlToTextResponse": {
      "description": "Result of running the URL website to Text operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Text content result from the URL website input",
          "type": "string"
        }
      }
    },
    "HtmlToPdfRequest": {
      "description": "Details of the HTML to PDF request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to render to PDF",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).",
          "type": "integer"
        },
        "IncludeBackgroundGraphics": {
          "description": "Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.",
          "type": "boolean"
        },
        "ScaleFactor": {
          "format": "int32",
          "description": "Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.",
          "type": "integer"
        }
      }
    },
    "HtmlToPngRequest": {
      "description": "Details of the HTML to PNG request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to render to PNG (screenshot)",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).",
          "type": "integer"
        },
        "ScreenshotWidth": {
          "format": "int32",
          "description": "Optional: Width of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "type": "integer"
        },
        "ScreenshotHeight": {
          "format": "int32",
          "description": "Optional: Height of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "type": "integer"
        }
      }
    },
    "HtmlToTextRequest": {
      "description": "Details of the HTML to Text request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to extract the text from",
          "type": "string"
        }
      }
    },
    "HtmlToTextResponse": {
      "description": "Result of running the HTML to Text operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Text content result from the HTML input",
          "type": "string"
        }
      }
    },
    "HtmlToOfficeRequest": {
      "description": "Details of the HTML to Office request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to render to Office format",
          "type": "string"
        }
      }
    },
    "HtmlMdResult": {
      "description": "Result from converting a Markdown file to HTML",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if operation was successful, false otherwise",
          "type": "boolean"
        },
        "Html": {
          "description": "Resulting HTML from the conversion",
          "type": "string"
        }
      }
    },
    "FinishEditingRequest": {
      "description": "Input to a Finish Editing request",
      "type": "object",
      "properties": {
        "InputFileUrl": {
          "description": "URL of a document being edited to get the contents of.",
          "type": "string"
        }
      }
    },
    "CreateBlankDocxRequest": {
      "description": "Input to a Create Blank Word Document request",
      "type": "object",
      "properties": {
        "InitialText": {
          "description": "Optional; initial text to include in the document",
          "type": "string"
        }
      }
    },
    "CreateBlankDocxResponse": {
      "description": "Result of creating a blank Word document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "ReplaceStringRequest": {
      "description": "Input to a string replacement request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "MatchString": {
          "description": "String to search for and match against, to be replaced",
          "type": "string"
        },
        "ReplaceString": {
          "description": "String to replace the matched values with",
          "type": "string"
        },
        "MatchCase": {
          "description": "True if the case should be matched, false for case insensitive match",
          "type": "boolean"
        }
      }
    },
    "MultiReplaceStringRequest": {
      "description": "Input to a multiple string replacement request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ReplaceStrings": {
          "description": "An array of individual string replacement requests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleReplaceString"
          }
        }
      }
    },
    "SingleReplaceString": {
      "description": "A single string replacement request",
      "type": "object",
      "properties": {
        "MatchString": {
          "description": "String to search for and match against, to be replaced",
          "type": "string"
        },
        "ReplaceString": {
          "description": "String to replace the matched values with",
          "type": "string"
        },
        "MatchCase": {
          "description": "True if the case should be matched, false for case insensitive match",
          "type": "boolean"
        }
      }
    },
    "GetDocxTablesRequest": {
      "description": "Input to a Get Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxTablesResponse": {
      "description": "Result of running a Get-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Tables": {
          "description": "Tables in the DOCX file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTable"
          }
        }
      }
    },
    "DocxTable": {
      "description": "A table in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "TableID": {
          "description": "The ID of the table; leave blank for new tables",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this table object; leave blank for new tables",
          "type": "string"
        },
        "Width": {
          "description": "The Width of the table, or 0 if not specified",
          "type": "string"
        },
        "WidthType": {
          "description": "The Width configuration type of the table",
          "type": "string"
        },
        "TableRows": {
          "description": "Rows in the table; this is where the contents is located",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableRow"
          }
        },
        "TopBorderType": {
          "description": "Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "TopBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "TopBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "TopBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "BottomBorderType": {
          "description": "Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "BottomBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "BottomBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "BottomBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "LeftBorderType": {
          "description": "Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "LeftBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "LeftBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "LeftBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "RightBorderType": {
          "description": "Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "RightBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "RightBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "RightBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "CellHorizontalBorderType": {
          "description": "Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "CellHorizontalBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellHorizontalBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellHorizontalBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "CellVerticalBorderType": {
          "description": "Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "CellVerticalBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellVerticalBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellVerticalBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "StartBorderType": {
          "description": "Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "StartBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "StartBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "StartBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "EndBorderType": {
          "description": "Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "EndBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "EndBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "EndBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "TableIndentationMode": {
          "description": "Table indentation type",
          "type": "string"
        },
        "TableIndentationWidth": {
          "format": "int32",
          "description": "Table indentation width",
          "type": "integer"
        }
      }
    },
    "DocxTableRow": {
      "description": "A row in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "RowIndex": {
          "format": "int32",
          "description": "Index of the row, 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this table row object; leave blank for new tables",
          "type": "string"
        },
        "RowCells": {
          "description": "Cells in the row; this is where the contents of the row is stored",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableCell"
          }
        }
      }
    },
    "DocxTableCell": {
      "description": "A cell in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "CellIndex": {
          "format": "int32",
          "description": "The index of the cell, 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs inside the cell; this is where the contents of the cell are stored",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "CellShadingColor": {
          "description": "Color of the cell shading",
          "type": "string"
        },
        "CellShadingFill": {
          "description": "Fill of the cell shading",
          "type": "string"
        },
        "CellShadingPattern": {
          "description": "Pattern of the cell shading",
          "type": "string"
        },
        "CellWidthMode": {
          "description": "Width mode of the cell; can be auto (for automatic) or manual",
          "type": "string"
        },
        "CellWidth": {
          "description": "Width of the cell",
          "type": "string"
        }
      }
    },
    "DocxParagraph": {
      "description": "A paragraph in a Word Document (DOCX) file; there is where text, content and formatting are stored - similar to the paragraph tag in HTML",
      "type": "object",
      "properties": {
        "ParagraphIndex": {
          "format": "int32",
          "description": "The index of the paragraph; 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this Paragraph object; leave blank during creation",
          "type": "string"
        },
        "ContentRuns": {
          "description": "The content runs in the paragraph - this is where text is stored; similar to a span in HTML",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxRun"
          }
        },
        "StyleID": {
          "description": "Style ID of the style applied to the paragraph; null if no style is applied",
          "type": "string"
        }
      }
    },
    "DocxRun": {
      "description": "A content run in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "RunIndex": {
          "format": "int32",
          "description": "Index of the run, 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this Run object; leave blank for creation",
          "type": "string"
        },
        "TextItems": {
          "description": "Text items inside the run; this is where the actual text content is stored",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxText"
          }
        },
        "Bold": {
          "description": "True to make the text bold, false otherwise",
          "type": "boolean"
        },
        "Italic": {
          "description": "True to make the text italic, false otherwise",
          "type": "boolean"
        },
        "Underline": {
          "description": "Underline mode for the text; possible values are: Words, Double, Thick, Dotted, DottedHeavy, Dash, DashedHeavy, DashLong, DashLongHeavy, DotDash, DashDotHeavy, DotDotDash, DashDotDotHeavy, Wave, WavyHeavy, WavyDouble, None",
          "type": "string"
        },
        "FontFamily": {
          "description": "Font Family name for the text, e.g. \"Arial\" or \"Times New Roman\"",
          "type": "string"
        },
        "FontSize": {
          "description": "Font size in font points (e.g. \"24\")",
          "type": "string"
        }
      }
    },
    "DocxText": {
      "description": "Unit of text content in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "TextIndex": {
          "format": "int32",
          "description": "Index of the text content in the run; 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this Text object; leave blank for creation",
          "type": "string"
        },
        "TextContent": {
          "description": "Text string containing the text content of this text content item",
          "type": "string"
        }
      }
    },
    "GetDocxTableByIndexRequest": {
      "description": "Input to a Get Tables by Index request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TableIndex": {
          "format": "int32",
          "description": "0-based index of the table to retrieve from the Word Document",
          "type": "integer"
        }
      }
    },
    "GetDocxTableByIndexResponse": {
      "description": "Result of running a Get-Tables by Index command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Table": {
          "$ref": "#/definitions/DocxTable",
          "description": "Requested Table in the DOCX file"
        }
      }
    },
    "GetDocxImagesRequest": {
      "description": "Input to a Get Images request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxImagesResponse": {
      "description": "Result of running a Get-Images command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Images": {
          "description": "Images in the DOCX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxImage"
          }
        }
      }
    },
    "DocxImage": {
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "ImageName": {
          "description": "The Name of the image",
          "type": "string"
        },
        "ImageId": {
          "format": "int64",
          "description": "The Id of the image",
          "type": "integer"
        },
        "ImageDescription": {
          "description": "The Description of the image",
          "type": "string"
        },
        "ImageWidth": {
          "format": "int64",
          "description": "Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height",
          "type": "integer"
        },
        "ImageHeight": {
          "format": "int64",
          "description": "Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height",
          "type": "integer"
        },
        "XOffset": {
          "format": "int64",
          "description": "X (horizontal) offset of the image",
          "type": "integer"
        },
        "YOffset": {
          "format": "int64",
          "description": "Y (vertical) offset of the image",
          "type": "integer"
        },
        "ImageDataEmbedId": {
          "description": "Read-only; internal ID for the image contents",
          "type": "string"
        },
        "ImageDataContentType": {
          "description": "Read-only; image data MIME content-type",
          "type": "string"
        },
        "ImageInternalFileName": {
          "description": "Read-only; internal file name/path for the image",
          "type": "string"
        },
        "ImageContentsURL": {
          "description": "URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.",
          "type": "string"
        },
        "InlineWithText": {
          "description": "True if the image is inline with the text; false if it is floating",
          "type": "boolean"
        }
      }
    },
    "GetDocxStylesRequest": {
      "description": "Input to a Get Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxStylesResponse": {
      "description": "Result of running a Get-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Styles": {
          "description": "Styles in the DOCX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxStyle"
          }
        }
      }
    },
    "DocxStyle": {
      "description": "Style in a DOCX Word Document",
      "type": "object",
      "properties": {
        "StyleID": {
          "description": "ID of the style",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Bold": {
          "description": "Style applies bold formatting",
          "type": "boolean"
        },
        "Italic": {
          "description": "Style applies italic formatting",
          "type": "boolean"
        },
        "Underline": {
          "description": "Style applies underline formatting",
          "type": "boolean"
        },
        "FontSize": {
          "description": "Font size",
          "type": "string"
        },
        "FontFamily": {
          "description": "Font family",
          "type": "string"
        }
      }
    },
    "GetDocxSectionsRequest": {
      "description": "Input to a Get Sections request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxSectionsResponse": {
      "description": "Result of running a Get-Sections command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Sections": {
          "description": "Sections in the DOCX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxSection"
          }
        }
      }
    },
    "DocxSection": {
      "description": "Section of a Word Document (DOCX)",
      "type": "object",
      "properties": {
        "StartingPageNumbers": {
          "description": "Page numbers that the section starts at, typically just one",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        }
      }
    },
    "GetDocxBodyRequest": {
      "description": "Input to a Get Body request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxBodyResponse": {
      "description": "Result of running a Get-Body command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Body": {
          "$ref": "#/definitions/DocxBody",
          "description": "Body in the DOCX document"
        }
      }
    },
    "DocxBody": {
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "AllParagraphs": {
          "description": "All paragraphs anywhere in the document; these objects are not sequentially placed but are scatted across document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "AllTables": {
          "description": "All tables anywhere in the document; these objects are not sequentially placed but are scatted across the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTable"
          }
        }
      }
    },
    "FindDocxParagraphRequest": {
      "description": "Input to a request to find matching paragraphs in a Word DOCX document",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "FindString": {
          "description": "Required: The target string to search for in the paragraphs of the document",
          "type": "string"
        },
        "MatchCase": {
          "description": "Optional: True to match case, false to ignore case when matching",
          "type": "boolean"
        }
      }
    },
    "FindDocxParagraphResponse": {
      "description": "Result of performing a find matching paragraphs operation on a Word Document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful; false otherwise",
          "type": "boolean"
        },
        "MatchingParagraphs": {
          "description": "Matching paragraphs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "Count": {
          "format": "int32",
          "description": "Count of matching paragraphs",
          "type": "integer"
        }
      }
    },
    "ReplaceDocxParagraphRequest": {
      "description": "Input to a request to replace matching paragraphs in a Word DOCX document",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "FindString": {
          "description": "Required: The target string to search for in the paragraphs of the document",
          "type": "string"
        },
        "MatchCase": {
          "description": "Optional: True to match case, false to ignore case when matching",
          "type": "boolean"
        },
        "Replacement_Image": {
          "$ref": "#/definitions/DocxImage",
          "description": "Optional: Image to replace the paragraph with; note that most of the fields in this object are optional and do not need to be supplied"
        }
      }
    },
    "ReplaceDocxParagraphResponse": {
      "description": "Result of performing a replace matching paragraphs operation on a Word Document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful; false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL of the edited document",
          "type": "string"
        }
      }
    },
    "GetDocxPagesRequest": {
      "description": "Input to a Get Word DOCX Document Pages request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "MaximumPages": {
          "format": "int32",
          "description": "Optional: Maximum number of pages to return; set to 0 or do not supply to return all pages",
          "type": "integer"
        }
      }
    },
    "GetDocxPagesResponse": {
      "description": "Result of getting pages from a Word Document DOCX",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Pages": {
          "description": "Pages in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxPage"
          }
        },
        "PageCount": {
          "format": "int32",
          "description": "Count of pages",
          "type": "integer"
        }
      }
    },
    "DocxPage": {
      "description": "One page in a Word Document DOCX",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of this page, 1-based",
          "type": "integer"
        },
        "Paragraphs": {
          "description": "All paragraphs anywhere in the document; these objects are not sequentially placed but are scatted across document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        }
      }
    },
    "GetDocxGetCommentsRequest": {
      "description": "Input to a Get Word DOCX Document comments request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxCommentsResponse": {
      "description": "Result of getting comments from a Word Document DOCX",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Comments": {
          "description": "Comments in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxComment"
          }
        },
        "CommentCount": {
          "format": "int32",
          "description": "The number of comments in the document",
          "type": "integer"
        }
      }
    },
    "DocxComment": {
      "description": "Comment in a Word Document",
      "type": "object",
      "properties": {
        "Path": {
          "description": "Path to the comment in the document",
          "type": "string"
        },
        "Author": {
          "description": "Author name of the comment",
          "type": "string"
        },
        "AuthorInitials": {
          "description": "Initials of the author of the comment",
          "type": "string"
        },
        "CommentText": {
          "description": "Text content of the comment",
          "type": "string"
        },
        "CommentDate": {
          "format": "date-time",
          "description": "Date timestamp of the comment",
          "type": "string"
        },
        "IsTopLevel": {
          "description": "True if the comment is at the top level, false if this comment is a child reply of another comment",
          "type": "boolean"
        },
        "IsReply": {
          "description": "True if this comment is a reply to another comment, false otherwise",
          "type": "boolean"
        },
        "ParentCommentPath": {
          "description": "Path to the parent of this comment, if this comment is a reply, otherwise this value will be null",
          "type": "string"
        },
        "Done": {
          "description": "True if this comment is marked as Done in Word, otherwise it is false",
          "type": "boolean"
        }
      }
    },
    "GetDocxGetCommentsHierarchicalRequest": {
      "description": "Input to a Get Word DOCX Document comments hierarchically request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxCommentsHierarchicalResponse": {
      "description": "Result of getting comments hierarchically from a Word Document DOCX",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Comments": {
          "description": "Comments in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTopLevelComment"
          }
        },
        "TopLevelCommentCount": {
          "format": "int32",
          "description": "The number of comments in the document",
          "type": "integer"
        }
      }
    },
    "DocxTopLevelComment": {
      "description": "Top-level Comment in a Word Document",
      "type": "object",
      "properties": {
        "Path": {
          "description": "Path to the comment in the document",
          "type": "string"
        },
        "Author": {
          "description": "Author name of the comment",
          "type": "string"
        },
        "AuthorInitials": {
          "description": "Initials of the author of the comment",
          "type": "string"
        },
        "CommentText": {
          "description": "Text content of the comment",
          "type": "string"
        },
        "CommentDate": {
          "format": "date-time",
          "description": "Date timestamp of the comment",
          "type": "string"
        },
        "ReplyChildComments": {
          "description": "Child comments, that are replies to this one",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxComment"
          }
        },
        "Done": {
          "description": "True if this comment is marked as Done in Word, otherwise it is false",
          "type": "boolean"
        }
      }
    },
    "DocxInsertCommentOnParagraphRequest": {
      "description": "Input to a Insert Comment on Paragraph request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ParagraphPath": {
          "description": "Path to the paragraph to attach the comment to.  You can get the Path by retrieving all of the Paragraphs in document by calling Get Body and taking the Path property of the desired paragraph to add the comment to.",
          "type": "string"
        },
        "CommentToInsert": {
          "$ref": "#/definitions/DocxComment",
          "description": "Comment to insert"
        }
      }
    },
    "InsertDocxCommentOnParagraphResponse": {
      "description": "Result of running an Insert-Comment-on-Paragraph command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemoveDocxPagesRequest": {
      "description": "Input to a Remove Word DOCX Document Pages request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "StartDeletePageNumber": {
          "format": "int32",
          "description": "Page number (1-based) to start deleting pages; inclusive",
          "type": "integer"
        },
        "EndDeletePageNumber": {
          "format": "int32",
          "description": "Page number (1-based) to stop deleting pages; inclusive",
          "type": "integer"
        }
      }
    },
    "GetDocxHeadersAndFootersRequest": {
      "description": "Input to a Get Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxHeadersAndFootersResponse": {
      "description": "Result of running a Get-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxHeader"
          }
        },
        "Footers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxFooter"
          }
        }
      }
    },
    "DocxHeader": {
      "description": "Header of a Word Document (DOCX)",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs in this header",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "SectionsWithHeader": {
          "description": "Sections that the header is applied to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxSection"
          }
        }
      }
    },
    "DocxFooter": {
      "description": "Footer in a Word Document (DOCX)",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs in this footer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "SectionsWithFooter": {
          "description": "Sections that the footer is applied to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxSection"
          }
        }
      }
    },
    "DocxSetHeaderRequest": {
      "description": "Input to a set-header command",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "HeaderToApply": {
          "$ref": "#/definitions/DocxHeader",
          "description": "Header to apply"
        }
      }
    },
    "DocxSetHeaderResponse": {
      "description": "Result of running a set-header command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DocxSetFooterRequest": {
      "description": "Input to set-footer command",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "FooterToApply": {
          "$ref": "#/definitions/DocxFooter",
          "description": "Footer to apply"
        }
      }
    },
    "DocxSetFooterResponse": {
      "description": "Result of running a set-footer command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DocxSetFooterAddPageNumberRequest": {
      "description": "Input to set-footer/add-page-number command",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PrependText": {
          "description": "Optional: extra text to add before the page number, for example if you want to show \"Page 1\" then you can set PrependText to \"Page\"",
          "type": "string"
        }
      }
    },
    "DocxInsertImageRequest": {
      "description": "Input to set-footer command",
      "type": "object",
      "properties": {
        "InputDocumentFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputDocumentFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InputImageFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.",
          "type": "string"
        },
        "InputImageFileUrl": {
          "description": "Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ImageToAdd": {
          "$ref": "#/definitions/DocxImage",
          "description": "Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl."
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        },
        "WidthInEMUs": {
          "format": "int64",
          "description": "Optional: The width of the image in EMUs",
          "type": "integer"
        },
        "HeightInEMUs": {
          "format": "int64",
          "description": "Optional: The height of the image in EMUs",
          "type": "integer"
        }
      }
    },
    "DocxInsertImageResponse": {
      "description": "Result of running a set-footer command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "InsertDocxInsertParagraphRequest": {
      "description": "Input to a Insert Paragraph request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ParagraphToInsert": {
          "$ref": "#/definitions/DocxParagraph",
          "description": "Table you would like to insert"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        }
      }
    },
    "InsertDocxInsertParagraphResponse": {
      "description": "Result of running an Insert-Paragraph command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "InsertDocxTablesRequest": {
      "description": "Input to a Insert Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TableToInsert": {
          "$ref": "#/definitions/DocxTable",
          "description": "Table you would like to insert"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        }
      }
    },
    "InsertDocxTablesResponse": {
      "description": "Result of running an Insert-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "GetDocxTableRowRequest": {
      "description": "Input to a get DOCX table row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TablePath": {
          "description": "Path to the table to retrievew the row from",
          "type": "string"
        },
        "TableRowRowIndex": {
          "format": "int32",
          "description": "0-based index of the row to retrieve (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        }
      }
    },
    "GetDocxTableRowResponse": {
      "description": "Result of running an Get Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "RowResult": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Contents of the table row that was requested"
        }
      }
    },
    "DeleteDocxTableRowRequest": {
      "description": "Input to a delete DOCX table row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TablePath": {
          "description": "Path to the table to delete the row from",
          "type": "string"
        },
        "TableRowRowIndex": {
          "format": "int32",
          "description": "0-based index of the row to delete (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        }
      }
    },
    "DeleteDocxTableRowResponse": {
      "description": "Result of running an Delete Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DeleteDocxTableRowRangeRequest": {
      "description": "Input to a delete DOCX table row range request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TablePath": {
          "description": "Path to the table to delete the row from",
          "type": "string"
        },
        "TableRowRowIndexStart": {
          "format": "int32",
          "description": "0-based index of the row to begin deleting rows (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        },
        "TableRowRowIndexEnd": {
          "format": "int32",
          "description": "0-based index of the row to stop deleting rows (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        }
      }
    },
    "DeleteDocxTableRowRangeResponse": {
      "description": "Result of running an Delete Table Row Range command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "InsertDocxTableRowRequest": {
      "description": "Input to a Insert Table Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RowToInsert": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Table you would like to insert"
        },
        "InsertPlacement": {
          "description": "Optional; default is TableEnd.  Placement Type of the insert; possible values are: TableStart (very beginning of the table), TableEnd (very end of the document), or a 0-based row index number as an integer, 0 being the first row in the table, 1 being the second row in the table, 2 being the third row in the table, etc. to insert this row after",
          "type": "string"
        },
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        }
      }
    },
    "InsertDocxTableRowResponse": {
      "description": "Result of running an Insert-Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableRowRequest": {
      "description": "Input to a Update Table Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RowToUpdate": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Table row contents you would like to update the row with"
        },
        "TableRowIndex": {
          "format": "int32",
          "description": "0-based index of the Table Row to update",
          "type": "integer"
        },
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableRowResponse": {
      "description": "Result of running an Update Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableCellRequest": {
      "description": "Input to a Update Table Cell request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "CellToUpdate": {
          "$ref": "#/definitions/DocxTableCell",
          "description": "Table cell contents you would like to update the cell with"
        },
        "TableRowIndex": {
          "format": "int32",
          "description": "0-based index of the Table Row to update",
          "type": "integer"
        },
        "TableCellIndex": {
          "format": "int32",
          "description": "0-based index of the Table Cell (within the row) to update",
          "type": "integer"
        },
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableCellResponse": {
      "description": "Result of running an Update Table Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemoveDocxHeadersAndFootersRequest": {
      "description": "Input to a Remove Headers and Footers request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RemoveHeaders": {
          "description": "True if you would like to remove all headers from the input document, false otherwise",
          "type": "boolean"
        },
        "RemoveFooters": {
          "description": "True if you would like to remove all footers from the input document, false otherwise",
          "type": "boolean"
        }
      }
    },
    "RemoveDocxHeadersAndFootersResponse": {
      "description": "Result of running a Remove Headers and Footers command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL of the resulting edited document; this is a secure URL and cannot be downloaded without adding the Apikey header; it is also temporary, stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DocxRemoveObjectRequest": {
      "description": "Input to a Insert Paragraph request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PathToObjectToRemove": {
          "description": "Path within the document of the object to delete; fill in the PathToObjectToRemove field using the Path value from an existing object.",
          "type": "string"
        }
      }
    },
    "DocxRemoveObjectResponse": {
      "description": "Result of running an Remove-Object command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "CreateBlankSpreadsheetRequest": {
      "description": "Input to a Create Blank Spreadsheet request",
      "type": "object",
      "properties": {
        "WorksheetName": {
          "description": "The blank Spreadsheet will have a default Worksheet in it; supply a name, or if left empty, will default to Worksheet1",
          "type": "string"
        }
      }
    },
    "CreateBlankSpreadsheetResponse": {
      "description": "Result of creating a blank worksheet",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "CreateSpreadsheetFromDataRequest": {
      "description": "Input to Create a new Spreadsheet request",
      "type": "object",
      "properties": {
        "WorksheetName": {
          "description": "Optional; The new Spreadsheet will have a default Worksheet in it; supply a name, or if left empty, will default to Worksheet1",
          "type": "string"
        },
        "Rows": {
          "description": "Required; Rows and cells to populate the spreadsheet with",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetRow"
          }
        }
      }
    },
    "XlsxSpreadsheetRow": {
      "description": "Row in an Excel spreadsheet worksheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "Cells": {
          "description": "Spreadsheet Cells in the spreadsheet row",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetCell"
          }
        }
      }
    },
    "XlsxSpreadsheetCell": {
      "description": "Cell in an Excel Spreadsheet worksheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "TextValue": {
          "description": "Text value of the cell",
          "type": "string"
        },
        "CellIdentifier": {
          "description": "Cell reference of the cell, e.g. A1, Z22, etc.",
          "type": "string"
        },
        "StyleIndex": {
          "format": "int32",
          "description": "Identifier for the style to apply to this style",
          "type": "integer"
        },
        "Formula": {
          "type": "string"
        }
      }
    },
    "CreateSpreadsheetFromDataResponse": {
      "description": "Result of creating a new worksheet from rows and cells",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "GetXlsxWorksheetsRequest": {
      "description": "Input to a Get Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetXlsxWorksheetsResponse": {
      "description": "Result of running a Get-Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Worksheets": {
          "description": "Worksheets in the Excel XLSX spreadsheet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxWorksheet"
          }
        }
      }
    },
    "XlsxWorksheet": {
      "description": "A worksheet (tab) in an Excel (XLSX) spreadsheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new worksheets",
          "type": "string"
        },
        "WorksheetName": {
          "description": "User-facing name of the worksheet tab",
          "type": "string"
        }
      }
    },
    "GetXlsxRowsAndCellsRequest": {
      "description": "Input to a Get Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        }
      }
    },
    "GetXlsxRowsAndCellsResponse": {
      "description": "Result of running a Get-Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Rows": {
          "description": "Spreadsheet Rows in the Excel XLSX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetRow"
          }
        }
      }
    },
    "GetXlsxSpecificRowRequest": {
      "description": "Input to a Get-Specific-Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "Path": {
          "description": "Required; Full path for the desired row",
          "type": "string"
        }
      }
    },
    "GetXlsxSpecificRowResponse": {
      "description": "Result of running a Get-Specific-Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Row": {
          "$ref": "#/definitions/XlsxSpreadsheetRow",
          "description": "Spreadsheet Row from the Excel XLSX document"
        }
      }
    },
    "ClearXlsxRowRequest": {
      "description": "Input to a Clear-Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToEdit": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "Required; Index for the desired row to be cleared",
          "type": "integer"
        }
      }
    },
    "ClearXlsxRowResponse": {
      "description": "Result of running a Clear-Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "AppendXlsxRowRequest": {
      "description": "Input to a Append-Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "Row": {
          "$ref": "#/definitions/XlsxSpreadsheetRow",
          "description": "Required; Row to be appended to the worksheet."
        }
      }
    },
    "AppendXlsxRowResponse": {
      "description": "Result of running an Append-Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemoveXlsxWorksheetRequest": {
      "description": "Input to a Remove Excel XLSX Spreadsheet worksheet request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToRemove": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Required; Worksheet (tab) within the spreadsheet to delete; leave blank to default to the first worksheet.  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet."
        }
      }
    },
    "GetXlsxCellRequest": {
      "description": "Input to a Get Cell request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "0-based index of the row, 0, 1, 2, ... to retrieve",
          "type": "integer"
        },
        "CellIndex": {
          "format": "int32",
          "description": "0-based index of the cell, 0, 1, 2, ... in the row to retrieve",
          "type": "integer"
        }
      }
    },
    "GetXlsxCellResponse": {
      "description": "Result of running a Get-Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Cell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Requested Cell in the Excel XLSX document"
        }
      }
    },
    "GetXlsxCellByIdentifierRequest": {
      "description": "Input to a Get Cell by cell identifier request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        },
        "CellIdentifier": {
          "description": "Required; Excel cell identifier, e.g. A1, B22, C33, etc.",
          "type": "string"
        }
      }
    },
    "GetXlsxCellByIdentifierResponse": {
      "description": "Result of running a Get-Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Cell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Requested Cell in the Excel XLSX document"
        }
      }
    },
    "ClearXlsxCellRequest": {
      "description": "Input to a Clear Cell in XLSX Worksheet request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to update; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "0-based index of the row, 0, 1, 2, ... to clear",
          "type": "integer"
        },
        "CellIndex": {
          "format": "int32",
          "description": "0-based index of the cell, 0, 1, 2, ... in the row to clear",
          "type": "integer"
        }
      }
    },
    "ClearXlsxCellResponse": {
      "description": "Result of running a Clear XLSX Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "SetXlsxCellRequest": {
      "description": "Input to a Set Cell in XLSX Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to update; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "0-based index of the row, 0, 1, 2, ... to set",
          "type": "integer"
        },
        "CellIndex": {
          "format": "int32",
          "description": "0-based index of the cell, 0, 1, 2, ... in the row to set",
          "type": "integer"
        },
        "CellValue": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "New Cell value to update/overwrite into the Excel XLSX spreadsheet"
        }
      }
    },
    "SetXlsxCellResponse": {
      "description": "Result of running a Set Cell in XLSX Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "SetXlsxCellByIdentifierRequest": {
      "description": "Input to a Set Cell by identifier in XLSX Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to update; leave blank to default to the first worksheet"
        },
        "CellIdentifier": {
          "description": "The Excel cell identifier (e.g. A1, B2, C33, etc.) of the cell to update",
          "type": "string"
        },
        "CellValue": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "New Cell value to update/overwrite into the Excel XLSX spreadsheet"
        }
      }
    },
    "SetXlsxCellByIdentifierResponse": {
      "description": "Result of running a Set Cell by identifier in XLSX Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "GetXlsxColumnsRequest": {
      "description": "Input to a Get Columns request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the columns of; leave blank to default to the first worksheet"
        }
      }
    },
    "GetXlsxColumnsResponse": {
      "description": "Result of running a Get-Columns command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Columns": {
          "description": "Spreadsheet Columns in the XLSX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetColumn"
          }
        }
      }
    },
    "XlsxSpreadsheetColumn": {
      "description": "Column in an Excel spreadsheet worksheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "HeadingCell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Heading cell for this column"
        }
      }
    },
    "GetXlsxImagesRequest": {
      "description": "Input to a Get Images request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the images of; leave blank to default to the first worksheet"
        }
      }
    },
    "GetXlsxImagesResponse": {
      "description": "Result of running a Get-Images command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Images": {
          "description": "Spreadsheet Images in the XLSX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxImage"
          }
        }
      }
    },
    "XlsxImage": {
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "ImageDataEmbedId": {
          "description": "Read-only; internal ID for the image contents",
          "type": "string"
        },
        "ImageDataContentType": {
          "description": "Read-only; image data MIME content-type",
          "type": "string"
        },
        "ImageInternalFileName": {
          "description": "Read-only; internal file name/path for the image",
          "type": "string"
        },
        "ImageContentsURL": {
          "description": "URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.",
          "type": "string"
        }
      }
    },
    "GetXlsxStylesRequest": {
      "description": "Input to a Get Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetXlsxStylesResponse": {
      "description": "Result of running a Get-Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "CellStyles": {
          "description": "Cell styles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxCellStyle"
          }
        }
      }
    },
    "DocxCellStyle": {
      "description": "Style in an Excel spreadsheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "Name": {
          "description": "Name of the style",
          "type": "string"
        },
        "FormatID": {
          "format": "int32",
          "description": "Format ID of the cell style",
          "type": "integer"
        },
        "BuiltInID": {
          "format": "int32",
          "description": "Built=in ID of the cell style",
          "type": "integer"
        }
      }
    },
    "InsertXlsxWorksheetRequest": {
      "description": "Input to a Insert Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToInsert": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Workersheet to insert"
        }
      }
    },
    "InsertXlsxWorksheetResponse": {
      "description": "Result of running a insert worksheet command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RenameXlsxWorksheetRequest": {
      "description": "Input to a Rename-Worksheet request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToRename": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "NewWorksheetName": {
          "description": "Required; The new name to be used for the worksheet",
          "type": "string"
        }
      }
    },
    "RenameXlsxWorksheetResponse": {
      "description": "Result of running a Rename-Worksheet command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "EnableSharedWorkbookRequest": {
      "description": "Input to a Enabled Shared Workbook request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "EnableSharedWorkbookResponse": {
      "description": "Result of running a Enable Shared Workbook command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DisableSharedWorkbookRequest": {
      "description": "Input to a Disable Shared Workbook request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "DisableSharedWorkbookResponse": {
      "description": "Result of running a Disable Shared Workbook command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemovePptxSlidesRequest": {
      "description": "Input to a Remove PowerPoint PPTX Presentation Slides request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "StartDeleteSlideNumber": {
          "format": "int32",
          "description": "Slide number (1-based) to start deleting slides; inclusive",
          "type": "integer"
        },
        "EndDeleteSlideNumber": {
          "format": "int32",
          "description": "Slide number (1-based) to stop deleting slides; inclusive",
          "type": "integer"
        }
      }
    },
    "PdfTextByPageResult": {
      "description": "Text of the PDF, broken down by page",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Pages": {
          "description": "Pages in the PDF",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfPageText"
          }
        }
      }
    },
    "PdfPageText": {
      "description": "Text of a single page of a PDF",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the page (1-based)",
          "type": "integer"
        },
        "PageText": {
          "description": "Text of the page",
          "type": "string"
        }
      }
    },
    "PdfMetadata": {
      "description": "Result of an autodetect/get-info operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Title": {
          "description": "Title of the document",
          "type": "string"
        },
        "Keywords": {
          "description": "Keywords of the document",
          "type": "string"
        },
        "Subject": {
          "description": "Subject of the document",
          "type": "string"
        },
        "Author": {
          "description": "User name of the creator/author of the document, if available, null if not available",
          "type": "string"
        },
        "Creator": {
          "description": "Creator of the document",
          "type": "string"
        },
        "DateModified": {
          "format": "date-time",
          "description": "The timestamp that the document was last modified, if available, null if not available",
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "description": "The timestamp that the document was created, if available, null if not available",
          "type": "string"
        },
        "PageCount": {
          "format": "int32",
          "description": "The number of pages in the document",
          "type": "integer"
        }
      }
    },
    "SetPdfMetadataRequest": {
      "description": "Request to set PDF metadata",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Input file contents bytes for the file to modify",
          "type": "string"
        },
        "MetadataToSet": {
          "$ref": "#/definitions/PdfMetadata",
          "description": "PDF metadata to set on the file"
        }
      }
    },
    "PdfFormFields": {
      "description": "Result of retrieving PDF form fields",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "FormFields": {
          "description": "Fields and field values found in the form",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfFormField"
          }
        }
      }
    },
    "PdfFormField": {
      "description": "Field definition and value in the form",
      "type": "object",
      "properties": {
        "FieldName": {
          "description": "Name of the form field",
          "type": "string"
        },
        "FieldType": {
          "description": "The data type of the field; possible values are Text (FieldValue will be a string), Checkbox (FieldValue can be \"true\" or \"false\"), ComboBox (FieldComboBoxSelectedIndex will also be populated), Other",
          "type": "string"
        },
        "FieldValue": {
          "description": "Value of the form field",
          "type": "string"
        },
        "FieldComboBoxSelectedIndex": {
          "format": "int32",
          "description": "Applies to ComboBox field types only; specifies the selected index of the combo box selection if available",
          "type": "integer"
        }
      }
    },
    "SetPdfFormFieldsRequest": {
      "description": "Request to set the fields in a PDF form",
      "type": "object",
      "properties": {
        "FieldValues": {
          "description": "Field values to set",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SetFormFieldValue"
          }
        },
        "InputFileBytes": {
          "format": "byte",
          "description": "Contents of the input file to set the fields on",
          "type": "string"
        }
      }
    },
    "SetFormFieldValue": {
      "description": "Individual field value to set in a PDF form",
      "type": "object",
      "properties": {
        "FieldName": {
          "description": "Name of the field to set; you can call /convert/edit/pdf/form/get-fields to enumerate field names in a form",
          "type": "string"
        },
        "TextValue": {
          "description": "For fields of type Text, the text value to put into the field",
          "type": "string"
        },
        "CheckboxValue": {
          "description": "For fields of type Checkbox, the value to put into the field",
          "type": "boolean"
        },
        "ComboBoxSelectedIndex": {
          "format": "int32",
          "description": "For fields of type ComboBox; specifies the selected index of the combo box selection",
          "type": "integer"
        }
      }
    },
    "GetPdfAnnotationsResult": {
      "description": "Result of retrieving annotations from a PDF document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Annotations": {
          "description": "Annotations in the PDF file, ordered by placement from start to finish in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfAnnotation"
          }
        }
      }
    },
    "PdfAnnotation": {
      "description": "PDF Annotation details",
      "type": "object",
      "properties": {
        "Title": {
          "description": "Title of the annotation; this is often the author of the annotation in Acrobat-created PDF files",
          "type": "string"
        },
        "AnnotationType": {
          "description": "Type of the annotation; possible values are Text",
          "type": "string"
        },
        "PageNumber": {
          "format": "int32",
          "description": "The 1-based index of the page containing the annotation",
          "type": "integer"
        },
        "AnnotationIndex": {
          "format": "int32",
          "description": "The 0-based index of the annotation in the document",
          "type": "integer"
        },
        "Subject": {
          "description": "Subject of the annotation",
          "type": "string"
        },
        "TextContents": {
          "description": "Text contents of the annotation",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Date that the annotation was created",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "description": "Date that the annotation was last modified",
          "type": "string"
        },
        "LeftX": {
          "format": "double",
          "description": "Left X coordinate for the location of the annotation",
          "type": "number"
        },
        "TopY": {
          "format": "double",
          "description": "Top Y coordination of the location of the annotation",
          "type": "number"
        },
        "Width": {
          "format": "double",
          "description": "Width of the annotation",
          "type": "number"
        },
        "Height": {
          "format": "double",
          "description": "Height of the annotation",
          "type": "number"
        }
      }
    },
    "AddPdfAnnotationRequest": {
      "description": "Request to add annotations to a PDF",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Input file contents bytes for the file to modify",
          "type": "string"
        },
        "AnnotationsToAdd": {
          "description": "Annotations to add to the PDF file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfAnnotation"
          }
        }
      }
    },
    "Base64DetectRequest": {
      "description": "Request to detect if input content is base 64 encoded",
      "type": "object",
      "properties": {
        "Base64ContentToDetect": {
          "description": "Input content text to detect if it is base 64 encoded",
          "type": "string"
        }
      }
    },
    "Base64DetectResponse": {
      "description": "Result of base 64 detection",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "IsBase64Encoded": {
          "description": "True if the input string is base 64 encoded, false otherwise",
          "type": "boolean"
        }
      }
    },
    "Base64EncodeRequest": {
      "description": "Request to encode content to Base 64",
      "type": "object",
      "properties": {
        "ContentToEncode": {
          "format": "byte",
          "description": "Input content to encode into Base 64",
          "type": "string"
        }
      }
    },
    "Base64EncodeResponse": {
      "description": "Result of base 64 encoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Base64TextContentResult": {
          "description": "Result of performing a base 64 encoding operation, a text string representing the encoded original file content",
          "type": "string"
        }
      }
    },
    "Base64DecodeRequest": {
      "description": "Request to decode content from Base 64 into binary",
      "type": "object",
      "properties": {
        "Base64ContentToDecode": {
          "description": "Input content to decode from Base 64 into binary",
          "type": "string"
        }
      }
    },
    "Base64DecodeResponse": {
      "description": "Result of base 64 decoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "ContentResult": {
          "format": "byte",
          "description": "Result of performing a base 64 decode operation, binary file content",
          "type": "string"
        }
      }
    },
    "TextEncodingDetectResponse": {
      "description": "Result of detecting text encoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextEncoding": {
          "description": "Text encoding used in file; possible values are ASCII, UTF7, UTF8, UTF16, BigEndianUnicode and UTF32",
          "type": "string"
        }
      }
    },
    "FindStringSimpleRequest": {
      "description": "Request to find a string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "TargetString": {
          "description": "Target input string to find",
          "type": "string"
        }
      }
    },
    "FindStringSimpleResponse": {
      "description": "Result of finding a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Matches": {
          "description": "Found matches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FindStringMatch"
          }
        },
        "MatchCount": {
          "format": "int32",
          "description": "The number of matches",
          "type": "integer"
        }
      }
    },
    "FindStringMatch": {
      "description": "Individual match result of finding a target string in a longer text string",
      "type": "object",
      "properties": {
        "CharacterOffsetStart": {
          "format": "int32",
          "description": "0-based index of the start of the match",
          "type": "integer"
        },
        "CharacterOffsetEnd": {
          "format": "int32",
          "description": "0-based index of the end of the match",
          "type": "integer"
        },
        "ContainingLine": {
          "description": "Text content of the line containing the match",
          "type": "string"
        }
      }
    },
    "FindStringRegexRequest": {
      "description": "Request to find a string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "TargetRegex": {
          "description": "Target input regular expression (regex) to find",
          "type": "string"
        },
        "MatchCase": {
          "description": "Set to True to match case, False to ignore case",
          "type": "boolean"
        }
      }
    },
    "FindStringRegexResponse": {
      "description": "Result of finding a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Matches": {
          "description": "Regular expression matches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FindRegexMatch"
          }
        },
        "MatchCount": {
          "format": "int32",
          "description": "The number of matches",
          "type": "integer"
        }
      }
    },
    "FindRegexMatch": {
      "description": "Individual regular expression match result of finding a target regex in a longer text string",
      "type": "object",
      "properties": {
        "CharacterOffsetStart": {
          "format": "int32",
          "description": "0-based index of the start of the match",
          "type": "integer"
        },
        "CharacterOffsetEnd": {
          "format": "int32",
          "description": "0-based index of the end of the match",
          "type": "integer"
        },
        "ContainingLine": {
          "description": "Text content of the line containing the match",
          "type": "string"
        },
        "MatchValue": {
          "description": "The match value",
          "type": "string"
        },
        "MatchGroups": {
          "description": "Regular expression regex match groups; these correspond to the match values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReplaceStringSimpleRequest": {
      "description": "Request to replace a string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "TargetString": {
          "description": "Target input string to match and be replaced",
          "type": "string"
        },
        "ReplaceWithString": {
          "description": "Replacement for target string",
          "type": "string"
        }
      }
    },
    "ReplaceStringSimpleResponse": {
      "description": "Result of replacing a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a replace string operation",
          "type": "string"
        }
      }
    },
    "ReplaceStringRegexRequest": {
      "description": "Request to replace a regex string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "RegularExpressionString": {
          "description": "Target input regular expression (regex) string to match and be replaced; supports all regular expression values",
          "type": "string"
        },
        "ReplaceWithString": {
          "description": "Replacement for target string; supports referencing indexed regex matched values from RegularExpressionString, such as $1, $2, and so on",
          "type": "string"
        }
      }
    },
    "ReplaceStringRegexResponse": {
      "description": "Result of replacing a regex string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a base 64 decode operation, binary file content",
          "type": "string"
        }
      }
    },
    "DetectLineEndingsResponse": {
      "description": "Result of base 64 decoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "PrimaryNewlineType": {
          "description": "Type of newline in the file; possible vlaues are \"Mac\" (legacy Mac OS uses carriage return only); \"Unix\" (Unix and Linux OSes, and modern Mac OS); \"Windows\" (Windows operating systems)",
          "type": "string"
        },
        "PrimaryNewlineTerminator": {
          "description": "Characters used to terminate a newline; can be carriage return, linefeed, or carriage return + linefeed",
          "type": "string"
        },
        "InputLength": {
          "format": "int32",
          "description": "Length of the input string in characters",
          "type": "integer"
        }
      }
    },
    "ChangeLineEndingResponse": {
      "description": "Result of performing a change line ending operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Text content result",
          "type": "string"
        }
      }
    },
    "RemoveHtmlFromTextRequest": {
      "description": "Request to remove HTML from a string",
      "type": "object",
      "properties": {
        "TextContainingHtml": {
          "description": "Input text string to remove the HTML from",
          "type": "string"
        }
      }
    },
    "RemoveHtmlFromTextResponse": {
      "description": "Result of removing HTML from a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a remove HTML from string operation",
          "type": "string"
        }
      }
    },
    "RemoveWhitespaceFromTextRequest": {
      "description": "Request to remove whitespace from a string",
      "type": "object",
      "properties": {
        "TextContainingWhitespace": {
          "description": "Input text string to remove the whitespace from",
          "type": "string"
        }
      }
    },
    "RemoveWhitespaceFromTextResponse": {
      "description": "Result of removing whitespace from a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a remove whitespace from string operation",
          "type": "string"
        }
      }
    },
    "SplitDocxDocumentResult": {
      "description": "The result of splitting a Word document into individual Word DOCX pages",
      "type": "object",
      "properties": {
        "ResultDocuments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SplitDocumentResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "SplitDocumentResult": {
      "description": "A single Word DOCX file corresponding to one page in the original document",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1 for the first page",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the DOCX file of this slide; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "DocumentContents": {
          "format": "byte",
          "description": "Contents of the document in bytes",
          "type": "string"
        }
      }
    },
    "SplitXlsxWorksheetResult": {
      "description": "The result of splitting a spreadsheet into individual Excel XLSX worksheets",
      "type": "object",
      "properties": {
        "ResultWorksheets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorksheetResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "WorksheetResult": {
      "description": "A single Excel XLSX file corresponding to one worksheet (tab) in the original spreadsheet",
      "type": "object",
      "properties": {
        "WorksheetNumber": {
          "format": "int32",
          "description": "Worksheet number of the converted page, starting with 1 for the left-most worksheet",
          "type": "integer"
        },
        "WorksheetName": {
          "description": "The name of the worksheet",
          "type": "string"
        },
        "URL": {
          "description": "URL to the XLSX file of this worksheet; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "WorksheetContents": {
          "format": "byte",
          "description": "Contents of the worksheet in bytes",
          "type": "string"
        }
      }
    },
    "SplitPptxPresentationResult": {
      "description": "The result of splitting a presentation into individual PowerPoint PPTX slides",
      "type": "object",
      "properties": {
        "ResultPresentations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PresentationResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "PresentationResult": {
      "description": "A single Excel XLSX file corresponding to one worksheet (tab) in the original spreadsheet",
      "type": "object",
      "properties": {
        "SlideNumber": {
          "format": "int32",
          "description": "Worksheet number of the converted page, starting with 1 for the left-most worksheet",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PPTX file of this slide; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "PresentationContents": {
          "format": "byte",
          "description": "Contents of the presentation in bytes",
          "type": "string"
        }
      }
    },
    "SplitPdfResult": {
      "description": "Result of performing a PDF file split operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Documents": {
          "description": "PDF documents as output",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfDocument"
          }
        }
      }
    },
    "PdfDocument": {
      "description": "A single PDF file corresponding to one page in the original document",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1 for the first page",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PDF file of this worksheet; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "DocumentContents": {
          "format": "byte",
          "description": "If returnDocumentContents is set to true, will contain the contents of the document; otherwise will be set to null and the document contents will be available via the URL parameter",
          "type": "string"
        }
      }
    },
    "SplitTextDocumentByLinesResult": {
      "description": "The result of splitting a Text document into separate lines",
      "type": "object",
      "properties": {
        "ResultLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextDocumentLine"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "LineCount": {
          "format": "int32",
          "description": "The count of lines in the text file",
          "type": "integer"
        }
      }
    },
    "TextDocumentLine": {
      "description": "A single line of a Text document",
      "type": "object",
      "properties": {
        "LineNumber": {
          "format": "int32",
          "description": "The 1-based line index of the line",
          "type": "integer"
        },
        "LineContents": {
          "description": "The text contents of a single line of a text file",
          "type": "string"
        }
      }
    },
    "SplitTextDocumentByStringResult": {
      "description": "The result of splitting a Text document into separate elements",
      "type": "object",
      "properties": {
        "ResultElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextDocumentElement"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ElementCount": {
          "format": "int32",
          "description": "The count of elements in the text file",
          "type": "integer"
        }
      }
    },
    "TextDocumentElement": {
      "description": "A single element of a Text document",
      "type": "object",
      "properties": {
        "ElementNumber": {
          "format": "int32",
          "description": "The 1-based line index of the element",
          "type": "integer"
        },
        "ElementContents": {
          "description": "The text contents of a single element of a text file",
          "type": "string"
        }
      }
    },
    "AutodetectDocumentValidationResult": {
      "description": "Document validation result",
      "type": "object",
      "properties": {
        "FileFormatExtension": {
          "type": "string"
        },
        "DocumentIsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "ErrorCount": {
          "format": "int32",
          "description": "Number of validation errors found in the document",
          "type": "integer"
        },
        "WarningCount": {
          "format": "int32",
          "description": "Number of validation warnings found in the document",
          "type": "integer"
        },
        "ErrorsAndWarnings": {
          "description": "Details of errors and warnings found",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentValidationError"
          }
        }
      }
    },
    "DocumentValidationError": {
      "description": "Validation error found in document",
      "type": "object",
      "properties": {
        "Description": {
          "description": "Description of the error",
          "type": "string"
        },
        "Path": {
          "description": "XPath to the error",
          "type": "string"
        },
        "Uri": {
          "description": "URI of the part in question",
          "type": "string"
        },
        "IsError": {
          "description": "True if this is an error, false otherwise",
          "type": "boolean"
        }
      }
    },
    "DocumentValidationResult": {
      "description": "Document validation result",
      "type": "object",
      "properties": {
        "DocumentIsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "PasswordProtected": {
          "description": "True if the document is password protected, false otherwise",
          "type": "boolean"
        },
        "ErrorCount": {
          "format": "int32",
          "description": "Number of validation errors found in the document",
          "type": "integer"
        },
        "WarningCount": {
          "format": "int32",
          "description": "Number of validation warnings found in the document",
          "type": "integer"
        },
        "ErrorsAndWarnings": {
          "description": "Details of errors and warnings found",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentValidationError"
          }
        }
      }
    },
    "ViewerResponse": {
      "description": "Result of creating a viewer",
      "type": "object",
      "properties": {
        "HtmlEmbed": {
          "type": "string"
        },
        "Successful": {
          "type": "boolean"
        }
      }
    },
    "CreateZipArchiveRequest": {
      "description": "Request to create a Zip Archive",
      "type": "object",
      "properties": {
        "FilesInZip": {
          "description": "Top-level files in the root directory fo the zip file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipFile"
          }
        },
        "DirectoriesInZip": {
          "description": "Top-level directories in the root directory of the zip; directories can contain sub-directories and files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipDirectory"
          }
        }
      }
    },
    "ZipFile": {
      "description": "Representation of a file in a zip file",
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of this file",
          "type": "string"
        },
        "FileContents": {
          "format": "byte",
          "description": "Contents of this file",
          "type": "string"
        }
      }
    },
    "ZipDirectory": {
      "description": "Representation of a directory in a zip file",
      "type": "object",
      "properties": {
        "DirectoryName": {
          "description": "Name of this directory",
          "type": "string"
        },
        "DirectoriesInDirectory": {
          "description": "Child directories contained directly in this directory",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipDirectory"
          }
        },
        "FilesInDirectory": {
          "description": "Child files contained directly in this directory",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipFile"
          }
        }
      }
    },
    "ZipExtractResponse": {
      "description": "Result of performing a zip extract operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "FilesInZip": {
          "description": "Top-level files in the root directory fo the zip file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipFile"
          }
        },
        "DirectoriesInZip": {
          "description": "Top-level directories in the root directory of the zip; directories can contain sub-directories and files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipDirectory"
          }
        }
      }
    },
    "ZipEncryptionAdvancedRequest": {
      "description": "Request to encrypt an existing Zip Archive file and protect it with a password",
      "type": "object",
      "properties": {
        "InputFileContents": {
          "format": "byte",
          "description": "Input Zip File archive contents in bytes",
          "type": "string"
        },
        "Password": {
          "description": "Password to place on the Zip file; the longer the password, the more secure",
          "type": "string"
        },
        "EncryptionAlgorithm": {
          "description": "Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).  Default is AES-256.",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Apikey": {
      "type": "apiKey",
      "description": "API Key Authentication",
      "name": "Apikey",
      "in": "header"
    }
  }
}